{
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "UUID": {
        "type": "string",
        "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
        "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
      },
      "Absence": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "The UUID of the absence"
          },
          "absenceType": {
            "type": "string",
            "description": "The type of absence"
          },
          "code": {
            "type": "string",
            "description": "The code of the absence"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the absence"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the absence"
          },
          "fullDay": {
            "type": "boolean",
            "description": "If the absence is full day or half day"
          },
          "note": {
            "type": "string",
            "description": "The note of the absence"
          },
          "employeeId": {
            "$ref": "#/components/schemas/UUID",
            "description": "The employee id"
          },
          "departmentIds": {
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "type": "array",
            "description": "The departments the absence is related to"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UUID",
            "description": "The employee that created the absence"
          },
          "approvedAt": {
            "type": "string",
            "description": "approved status"
          },
          "deniedAt": {
            "type": "string",
            "description": "denies status"
          },
          "approvedOrDeniedBy": {
            "$ref": "#/components/schemas/UUID",
            "description": "The employee that approved or denied the absence"
          }
        },
        "required": [
          "id",
          "absenceType",
          "code",
          "startDate",
          "endDate",
          "fullDay",
          "note",
          "employeeId",
          "departmentIds",
          "createdBy",
          "approvedAt",
          "deniedAt",
          "approvedOrDeniedBy"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PageInfo": {
        "properties": {
          "size": {
            "type": "number",
            "format": "double",
            "description": "The amount of requested items.\nDefaults to 20"
          },
          "offset": {
            "type": "number",
            "format": "double",
            "description": "The amount of items that was requested to skip before the selection.\nDefaults to 0"
          },
          "total": {
            "type": "number",
            "format": "double",
            "description": "The total amount of items found"
          }
        },
        "required": [
          "size",
          "offset",
          "total"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_Absence_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Absence"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Company": {
        "description": "Also known as form fields.",
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "The UUID of the company"
          },
          "name": {
            "type": "string",
            "description": "The name of the company"
          },
          "description": {
            "type": "string",
            "description": "The description of the company"
          },
          "url": {
            "type": "string",
            "description": "The url of the company"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the company"
          },
          "updatedAt": {
            "type": "string",
            "description": "The update timestamp of the company"
          },
          "cvr": {
            "type": "string",
            "description": "The cvr of the company"
          },
          "locale": {
            "type": "string",
            "description": "The locale of the company"
          },
          "availableLocales": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The available_locales of the company"
          },
          "address": {
            "type": "string",
            "description": "The address of the company"
          },
          "city": {
            "type": "string",
            "description": "The city of the company"
          },
          "country": {
            "type": "string",
            "description": "The country of the company"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal_code of the company"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "url",
          "createdAt",
          "updatedAt",
          "cvr",
          "locale",
          "availableLocales",
          "address",
          "city",
          "country",
          "postalCode"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "FieldType": {
        "enum": [
          "text",
          "textarea",
          "select",
          "multiselect",
          "checkbox",
          "date",
          "rating",
          "table",
          "agreement",
          "employee",
          "country",
          "number"
        ],
        "type": "string"
      },
      "CustomFieldOption": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "The UUID of the option or its custom id if set"
          },
          "value": {
            "type": "string",
            "description": "The value of the option"
          },
          "order": {
            "type": "number",
            "format": "double",
            "description": "The order of the option in relation to other options on the custom field."
          }
        },
        "required": [
          "id",
          "value",
          "order"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CustomField": {
        "description": "Also known as form fields.",
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "The UUID of the custom field or its custom id if set"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field"
          },
          "description": {
            "type": "string",
            "description": "The description of the custom field"
          },
          "fieldType": {
            "$ref": "#/components/schemas/FieldType",
            "description": "The field type of the custom field"
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the custom field"
          },
          "required": {
            "type": "boolean",
            "description": "Whether or not this field has to be supplied"
          },
          "sensitive": {
            "type": "boolean",
            "description": "Whether or not this field is sensitive"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/CustomFieldOption"
            },
            "type": "array",
            "description": "An array of options that specify which values can be chosen for the custom field."
          },
          "fieldGroup": {
            "type": "string",
            "description": "The name of the field group that the custom field belongs to"
          },
          "order": {
            "type": "number",
            "format": "double",
            "description": "The placement of the custom field in its field group relative to the order of other fields"
          },
          "setup": {
            "$ref": "#/components/schemas/CustomField",
            "description": "The setup of child custom fields"
          }
        },
        "required": [
          "id",
          "name",
          "fieldType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_CustomField_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WriteResponse_CustomField_": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "item": {
            "$ref": "#/components/schemas/CustomField",
            "description": "The item that was created or updated"
          }
        },
        "required": [
          "success",
          "item"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CreateCustomFieldOptionInput": {
        "properties": {
          "customId": {
            "type": "string",
            "nullable": true,
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "value": {
            "type": "string",
            "description": "The value of the option"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "description": "The order of the option in relation to other options for the custom field"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CreateCustomFieldInput": {
        "properties": {
          "customId": {
            "type": "string",
            "nullable": true,
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field"
          },
          "fieldType": {
            "$ref": "#/components/schemas/FieldType",
            "description": "The field type of the custom field"
          },
          "description": {
            "type": "string",
            "description": "The description of the custom field"
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the custom field"
          },
          "required": {
            "type": "boolean",
            "description": "Whether or not this field has to be supplied.\nDefaults to false"
          },
          "sensitive": {
            "type": "boolean",
            "description": "Whether or not this field is sensitive.\nDefaults to false"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/CreateCustomFieldOptionInput"
            },
            "type": "array",
            "description": "An array of options that specify which values can be chosen for the custom field."
          },
          "fieldGroup": {
            "type": "string",
            "description": "The name of the field group that the custom field belongs to"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "description": "The placement of the custom field in its field group relative to the order of other fields\nDefaults to 0."
          }
        },
        "required": [
          "name",
          "fieldType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UpdateCustomFieldOptionInput": {
        "properties": {
          "updateType": {
            "type": "string",
            "enum": [
              "add",
              "change",
              "delete"
            ],
            "description": "The type of update that should happen with the given option"
          },
          "id": {
            "type": "string",
            "description": "The id of the option"
          },
          "customId": {
            "type": "string",
            "nullable": true,
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "value": {
            "type": "string",
            "description": "The value of the option"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "description": "The order of the option in relation to other options for the custom field"
          }
        },
        "required": [
          "updateType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UpdateCustomFieldInput": {
        "properties": {
          "customId": {
            "type": "string",
            "nullable": true,
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field"
          },
          "fieldType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldType"
              }
            ],
            "nullable": true,
            "description": "The field type of the custom field"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the custom field"
          },
          "defaultValue": {
            "type": "string",
            "nullable": true,
            "description": "The default value of the custom field"
          },
          "required": {
            "type": "boolean",
            "description": "Whether or not this field has to be supplied"
          },
          "sensitive": {
            "type": "boolean",
            "description": "Whether or not this field is sensitive"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/UpdateCustomFieldOptionInput"
            },
            "type": "array",
            "description": "An array of options that specify which values can be chosen for the custom field."
          },
          "fieldGroup": {
            "type": "string",
            "nullable": true,
            "description": "The name of the field group that the custom field belongs to"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "description": "The placement of the custom field in its field group relative to the order of other fields"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "SuccessResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "message": {
            "type": "string",
            "description": "A user friendly message"
          }
        },
        "required": [
          "success",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ISODate": {
        "type": "string",
        "description": "ISO 8601 date and time format.\nSee [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)"
      },
      "Department": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "UUID of the department or its custom id if set"
          },
          "mainDepartment": {
            "type": "boolean",
            "description": "Whether or not the department is the main department in its hierarchy"
          },
          "parentDepartment": {
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/UUID"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": [
              "name",
              "id"
            ],
            "type": "object",
            "description": "An object containing the id and name of the parent department"
          },
          "name": {
            "type": "string",
            "description": "The name of the department"
          },
          "description": {
            "type": "string",
            "description": "The description of the department"
          },
          "ean": {
            "type": "string",
            "description": "The ean number of the department"
          },
          "phone": {
            "type": "string",
            "description": "The phone number used to contact the department"
          },
          "email": {
            "type": "string",
            "description": "The email used to contact the department"
          },
          "address": {
            "type": "string",
            "description": "The address where the department resides"
          },
          "city": {
            "type": "string",
            "description": "The city where the department resides"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code where the department resides"
          },
          "country": {
            "type": "string",
            "description": "The country where the department resides"
          },
          "cvr": {
            "type": "string",
            "description": "The CVR number of the department"
          },
          "pNumber": {
            "type": "string",
            "description": "The P number of the department"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date of when the department was created"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date of when the department was last updated"
          },
          "departmentType": {
            "type": "string",
            "description": "The type of the department"
          }
        },
        "required": [
          "id",
          "mainDepartment",
          "parentDepartment",
          "name",
          "description",
          "ean",
          "phone",
          "email",
          "address",
          "city",
          "postalCode",
          "country",
          "cvr",
          "pNumber",
          "createdAt",
          "updatedAt",
          "departmentType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_Department_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Department"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WriteResponse_Department_": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "item": {
            "$ref": "#/components/schemas/Department",
            "description": "The item that was created or updated"
          }
        },
        "required": [
          "success",
          "item"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CreateDepartmentInput": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the department"
          },
          "customId": {
            "type": "string",
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "description": {
            "type": "string",
            "description": "The description of the department"
          },
          "mainDepartment": {
            "type": "boolean",
            "description": "Whether or not this department is the main department"
          },
          "ean": {
            "type": "string",
            "description": "The EAN number of the department"
          },
          "phone": {
            "type": "string",
            "description": "The phone number used to contact the department"
          },
          "email": {
            "type": "string",
            "description": "The email used to contact the department"
          },
          "address": {
            "type": "string",
            "description": "The address of the department"
          },
          "city": {
            "type": "string",
            "description": "The city of the department"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code of the department"
          },
          "country": {
            "type": "string",
            "description": "The country of the department."
          },
          "cvr": {
            "type": "string",
            "description": "The cvr number of the department"
          },
          "parentDepartmentId": {
            "type": "string",
            "description": "The id of the parent department that this department belongs to"
          },
          "departmentType": {
            "type": "string",
            "description": "The name of the department's type"
          },
          "pNumber": {
            "type": "string",
            "description": "The p-number of the department"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UpdateDepartmentInput": {
        "properties": {
          "customId": {
            "type": "string",
            "nullable": true,
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the department"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the department"
          },
          "mainDepartment": {
            "type": "boolean",
            "description": "Whether or not this department is the main department"
          },
          "ean": {
            "type": "string",
            "nullable": true,
            "description": "The ean number of the department"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "The phone number used to contact the department"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "The email used to contact the department"
          },
          "address": {
            "type": "string",
            "nullable": true,
            "description": "The address of the department"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "description": "The city of the department"
          },
          "postalCode": {
            "type": "string",
            "nullable": true,
            "description": "The postal code of the department"
          },
          "country": {
            "type": "string",
            "nullable": true,
            "description": "The country of the department."
          },
          "cvr": {
            "type": "string",
            "nullable": true,
            "description": "The cvr number of the department"
          },
          "parentDepartmentId": {
            "type": "string",
            "nullable": true,
            "description": "The id of the parent department that this department belongs to"
          },
          "departmentType": {
            "type": "string",
            "nullable": true,
            "description": "The name of the department's type"
          },
          "pNumber": {
            "type": "string",
            "nullable": true,
            "description": "The p-number of the department"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Signer": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the employee"
          },
          "name": {
            "type": "string",
            "description": "The full name of the employee"
          },
          "email": {
            "type": "string",
            "description": "The email of the employee"
          },
          "owner": {
            "type": "boolean",
            "description": "Whether or not the employee is the owner of the document"
          },
          "signed": {
            "type": "boolean",
            "description": "Whether or not the employee has signed the document"
          },
          "signedAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "When the document was signed"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "owner",
          "signed",
          "signedAt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Document": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "The UUID of the document"
          },
          "documentType": {
            "type": "string",
            "description": "The document type that has been assigned to the file"
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file"
          },
          "fileExtension": {
            "type": "string",
            "description": "The extension of the file"
          },
          "content": {
            "type": "string",
            "description": "Base64 content of the file. Only available when fetching a single document.\nBase64 content is not available for files larger than 4 MB.\nUse download url instead\n*** DEPRECATED IN FUTURE VERSIONS PLEASE USE DOWNLOAD URL ***"
          },
          "url": {
            "description": "Download url for content of file. Url expires 20 minutes after retrieval.\nOnly available when fetching a single document."
          },
          "owner": {
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "required": [
              "name",
              "id"
            ],
            "type": "object",
            "description": "The ID and name of the employee that the document belongs to.\nNot returned if fetching documents for a specific employee."
          },
          "placeholders": {
            "properties": {},
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "description": "Object containing placeholders used in the creation of the document"
          },
          "signers": {
            "items": {
              "$ref": "#/components/schemas/Signer"
            },
            "type": "array",
            "description": "Array of the employees that can sign the document."
          },
          "createdAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date the file was created in the system"
          },
          "remindAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date that the employee will be reminded of the document"
          },
          "expiresAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date the file is no longer valid"
          }
        },
        "required": [
          "id",
          "fileName",
          "fileExtension",
          "createdAt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_Document_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Operator": {
        "enum": [
          "equal",
          "notEqual",
          "like",
          "greater",
          "greaterEqual",
          "less",
          "lessEqual"
        ],
        "type": "string"
      },
      "DocumentTemplate": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "The UUID of the template"
          },
          "name": {
            "type": "string",
            "description": "The name of the template"
          },
          "description": {
            "type": "string",
            "description": "The description of the template"
          },
          "documentType": {
            "type": "string",
            "description": "The document type that the template relates to"
          },
          "language": {
            "type": "string",
            "description": "The language that the template is written in"
          },
          "dateFormat": {
            "type": "string",
            "description": "The format of dates used in the template"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date of when the template was created"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date of when the template was last updated"
          }
        },
        "required": [
          "id",
          "name",
          "language",
          "dateFormat",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_DocumentTemplate_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DocumentTemplate"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WriteResponse_DocumentTemplate_": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "item": {
            "$ref": "#/components/schemas/DocumentTemplate",
            "description": "The item that was created or updated"
          }
        },
        "required": [
          "success",
          "item"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CreateDocumentTemplateInput": {
        "properties": {
          "customId": {
            "type": "string",
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "The name of the document template"
          },
          "description": {
            "type": "string",
            "description": "The description of the document template"
          },
          "documentType": {
            "type": "string",
            "description": "The document type of the document template"
          },
          "language": {
            "type": "string",
            "enum": [
              "da_DK",
              "en_US"
            ],
            "description": "The format of dates in the document template"
          },
          "dateFormat": {
            "type": "string",
            "enum": [
              "20-07-2021",
              "2021-07-20",
              "20/07/2021",
              "July 20, 2021"
            ],
            "description": "The format of dates in the document template"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UpdateDocumentTemplateInput": {
        "properties": {
          "customId": {
            "type": "string",
            "nullable": true,
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "The name of the document template"
          },
          "description": {
            "type": "string",
            "description": "The description of the document template"
          },
          "documentType": {
            "type": "string",
            "description": "The document type of the document template"
          },
          "language": {
            "type": "string",
            "enum": [
              "da_DK",
              "en_US"
            ],
            "description": "The format of dates in the document template"
          },
          "dateFormat": {
            "type": "string",
            "enum": [
              "20-07-2021",
              "2021-07-20",
              "20/07/2021",
              "July 20, 2021"
            ],
            "description": "The format of dates in the document template"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Base64": {
        "type": "string",
        "description": "Base64 encoded string"
      },
      "EmployeePicture": {
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to the picture of the employee"
          },
          "content": {
            "$ref": "#/components/schemas/Base64",
            "description": "Base64 content of the picture.\nOnly available when retrieving a specific employee."
          }
        },
        "required": [
          "url"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Role": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "The UUID of the role"
          },
          "name": {
            "type": "string",
            "description": "The name of the role"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DepartmentRole": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "The UUID of the role"
          },
          "name": {
            "type": "string",
            "description": "The name of the role"
          },
          "departmentId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "The department UUID or its custom id if set"
          },
          "departmentName": {
            "type": "string",
            "description": "The department name"
          }
        },
        "required": [
          "id",
          "name",
          "departmentId",
          "departmentName"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Roles": {
        "properties": {
          "employee": {
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "type": "array",
            "description": "Roles that have been assigned directly to the employee"
          },
          "department": {
            "items": {
              "$ref": "#/components/schemas/DepartmentRole"
            },
            "type": "array",
            "description": "Roles that have been assigned to the employee from a department"
          },
          "company": {
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "type": "array",
            "description": "Roles that have been assigned to the employee from the company"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "EmployeeDepartment": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "The department UUID or its custom id if set"
          },
          "departmentId": {
            "$ref": "#/components/schemas/UUID",
            "description": "The uuid of the department"
          },
          "departmentCustomId": {
            "type": "string",
            "description": "The custom id of the department"
          },
          "name": {
            "type": "string",
            "description": "The department name"
          },
          "leader": {
            "type": "boolean",
            "description": "Whether or not the user is the leader of this department"
          }
        },
        "required": [
          "id",
          "departmentId",
          "departmentCustomId",
          "name",
          "leader"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DirectManager": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "ID of the leader"
          },
          "name": {
            "type": "string",
            "description": "Name of the leader"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SystemFields": {
        "properties": {
          "employeeNumber": {
            "type": "number",
            "format": "double",
            "description": "Public employee id (auto-incremented)"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the employee"
          },
          "email": {
            "type": "string",
            "description": "Email of the employee"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the employee"
          },
          "phone": {
            "type": "string",
            "description": "Work phone number of the employee"
          },
          "mobile": {
            "type": "string",
            "description": "Work mobile phone number of the employee"
          },
          "mobilePrivate": {
            "type": "string",
            "description": "Private mobile phone number of the employee"
          },
          "address": {
            "type": "string",
            "description": "Address of where the employee resides"
          },
          "city": {
            "type": "string",
            "description": "City of where the employee resides"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of where the employee resides"
          },
          "country": {
            "type": "string",
            "description": "Country of where the employee resides"
          },
          "locale": {
            "type": "string",
            "description": "Locale / language of the employee"
          },
          "employmentStart": {
            "type": "string",
            "description": "The date of when the employee started"
          },
          "employmentEnd": {
            "type": "string",
            "description": "The date of the when the employee stopped working"
          },
          "emailSecondary": {
            "type": "string",
            "description": "The secondary email of the employee"
          },
          "birthDate": {
            "type": "string",
            "description": "The date of birth of the employee"
          },
          "cpr": {
            "type": "string",
            "description": "The CPR number of the employee"
          },
          "jobPositionTitle": {
            "type": "string",
            "description": "The title of the employee's job position"
          },
          "jobPositionDescription": {
            "type": "string",
            "description": "The description of the employee's job position"
          },
          "jobPositionType": {
            "type": "string",
            "description": "The type of the employee's job position"
          },
          "jobPositionWorkingHours": {
            "type": "string",
            "description": "The working hours of the employee's job position"
          },
          "bankRegistrationNumber": {
            "type": "string",
            "description": "The employee's bank registration number"
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "The employee's bank account number"
          },
          "directManager": {
            "$ref": "#/components/schemas/DirectManager",
            "description": "The employee's direct manager"
          },
          "seniority": {
            "type": "string",
            "description": "The employee's seniority"
          },
          "initials": {
            "type": "string",
            "description": "The employee's initials"
          }
        },
        "required": [
          "employeeNumber",
          "firstName",
          "email",
          "lastName"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "optionValue": {
        "properties": {
          "optionId": {
            "type": "string",
            "description": "Id of the option"
          },
          "optionValue": {
            "type": "string",
            "description": "Value of the option"
          }
        },
        "required": [
          "optionId",
          "optionValue"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "tableRow": {
        "properties": {},
        "type": "object",
        "additionalProperties": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "properties": {
                "optionValue": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "optionId": {
                  "type": "string"
                }
              },
              "required": [
                "optionValue",
                "optionId"
              ],
              "type": "object"
            }
          ]
        }
      },
      "EmployeeCustomField": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "The UUID of the custom field or its custom id if set"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field"
          },
          "type": {
            "type": "string",
            "description": "The type of the custom field"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/optionValue"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/optionValue"
                },
                "type": "array"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/tableRow"
                },
                "type": "array"
              }
            ],
            "description": "The value of the custom field.\nIf the custom field has a value from an option an object with the id and value of the option will be shown.\nIf the custom field has a value from a multiselect option an array of the id and value of the option will be shown."
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "value"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Employee": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "UUID of the employee or its custom id if set"
          },
          "companyAdmin": {
            "type": "boolean",
            "description": "Whether or not the employee is an administrator of the company"
          },
          "leader": {
            "type": "boolean",
            "description": "Whether or not the employee is a leader"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether or not the employee has been archived"
          },
          "systemUser": {
            "type": "boolean",
            "description": "Whether or not the employee is a system user"
          },
          "picture": {
            "$ref": "#/components/schemas/EmployeePicture",
            "description": "Contains the url and Base64 content of the employee's picture."
          },
          "roles": {
            "$ref": "#/components/schemas/Roles",
            "description": "The roles that have been assigned to the employee"
          },
          "departments": {
            "items": {
              "$ref": "#/components/schemas/EmployeeDepartment"
            },
            "type": "array",
            "description": "The departmens that the employee belongs to"
          },
          "systemFields": {
            "$ref": "#/components/schemas/SystemFields",
            "description": "An object containing the standard system fields for the employee"
          },
          "customFields": {
            "items": {
              "$ref": "#/components/schemas/EmployeeCustomField"
            },
            "type": "array",
            "description": "The custom fields of the employee"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date of when the employee was created"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The date of when the employee was last updated"
          }
        },
        "required": [
          "id",
          "companyAdmin",
          "leader",
          "archived",
          "systemUser",
          "systemFields",
          "customFields",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_Employee_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Employee"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SystemField": {
        "enum": [
          "employeeNumber",
          "firstName",
          "email",
          "lastName",
          "phone",
          "mobile",
          "mobilePrivate",
          "address",
          "city",
          "postalCode",
          "country",
          "locale",
          "employmentStart",
          "employmentEnd",
          "emailSecondary",
          "birthDate",
          "cpr",
          "jobPositionTitle",
          "jobPositionDescription",
          "jobPositionType",
          "jobPositionWorkingHours",
          "bankRegistrationNumber",
          "bankAccountNumber",
          "seniority"
        ],
        "type": "string"
      },
      "CreateEmployeeResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "item": {
            "$ref": "#/components/schemas/Employee",
            "description": "The item that was created or updated"
          },
          "password": {
            "type": "string",
            "description": "The user's password.\nWill be either the one provided in the request or an auto-generated one"
          }
        },
        "required": [
          "success",
          "item",
          "password"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DirectManagerInput": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "ID of the leader"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SystemFieldsInput": {
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the employee"
          },
          "email": {
            "type": "string",
            "description": "Email of the employee"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the employee"
          },
          "phone": {
            "type": "string",
            "description": "Work phone number of the employee"
          },
          "mobile": {
            "type": "string",
            "description": "Work mobile phone number of the employee"
          },
          "mobilePrivate": {
            "type": "string",
            "description": "Private mobile phone number of the employee"
          },
          "address": {
            "type": "string",
            "description": "Address of where the employee resides"
          },
          "city": {
            "type": "string",
            "description": "City of where the employee resides"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of where the employee resides"
          },
          "country": {
            "type": "string",
            "description": "Country of where the employee resides"
          },
          "locale": {
            "type": "string",
            "description": "Locale / language of the employee"
          },
          "employmentStart": {
            "type": "string",
            "description": "The date of when the employee started"
          },
          "employmentEnd": {
            "type": "string",
            "description": "The date of the when the employee stopped working"
          },
          "emailSecondary": {
            "type": "string",
            "description": "The secondary email of the employee"
          },
          "emailWork": {
            "type": "string",
            "description": "The work email of the employee"
          },
          "birthDate": {
            "type": "string",
            "description": "The date of birth of the employee"
          },
          "cpr": {
            "type": "string",
            "description": "The CPR number of the employee"
          },
          "jobPositionTitle": {
            "type": "string",
            "description": "The title of the employee's job position"
          },
          "jobPositionDescription": {
            "type": "string",
            "description": "The description of the employee's job position"
          },
          "jobPositionType": {
            "type": "string",
            "description": "The type of the employee's job position"
          },
          "jobPositionWorkingHours": {
            "type": "string",
            "description": "The working hours of the employee's job position"
          },
          "bankRegistrationNumber": {
            "type": "string",
            "description": "The employee's bank registration number"
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "The employee's bank account number"
          },
          "seniority": {
            "type": "string",
            "description": "The employee's seniority"
          },
          "directManager": {
            "$ref": "#/components/schemas/DirectManagerInput",
            "description": "The employee's direct manager"
          }
        },
        "required": [
          "firstName",
          "email",
          "lastName"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "EmployeePictureInput": {
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The name of the file including its extension.\ne.g. some_file_name.pdf"
          },
          "content": {
            "type": "string",
            "description": "The content of the file in base64"
          }
        },
        "required": [
          "fileName",
          "content"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "EmployeeDepartmentInput": {
        "description": "An object containing the id of the department the employee should be part of, and a boolean specifying if the employee should be its leader",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the department"
          },
          "leader": {
            "type": "boolean",
            "description": "Whether or not the employee is the leader of the department.\nDefaults to false"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CustomFieldInput": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the custom field"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "nullable": true,
            "description": "The value of the custom field.\nIf custom field has options, the value must match the name of the selected option.\nIf custom field is a multi select field, multiple values can be provided in an array."
          },
          "optionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "nullable": true,
            "description": "The custom id of the option.\nIf option is a multi select field, multiple values can be provided in an array."
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CreateEmployeeInput": {
        "properties": {
          "systemFields": {
            "$ref": "#/components/schemas/SystemFieldsInput",
            "description": "The system fields of the employee, such as email, phone and address"
          },
          "customId": {
            "type": "string",
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "companyAdmin": {
            "type": "boolean",
            "description": "Whether or not the employee is an administrator"
          },
          "leader": {
            "type": "boolean",
            "description": "Whether or not the employee is a leader"
          },
          "systemUser": {
            "type": "boolean",
            "description": "Whether or not the employee is a system user"
          },
          "picture": {
            "$ref": "#/components/schemas/EmployeePictureInput",
            "description": "The name and content of the picture"
          },
          "departments": {
            "items": {
              "$ref": "#/components/schemas/EmployeeDepartmentInput"
            },
            "type": "array",
            "description": "The departments that the employee belongs to"
          },
          "customFields": {
            "items": {
              "$ref": "#/components/schemas/CustomFieldInput"
            },
            "type": "array",
            "description": "An array of objects containing the id and value of custom fields belonging to the employee"
          },
          "password": {
            "type": "string",
            "description": "The password for the user. If omitted, a password is generated automatically"
          },
          "sendInvitation": {
            "type": "boolean",
            "description": "Whether or not to send an invitation to the email given in systemFields"
          },
          "invitationLanguage": {
            "type": "string",
            "enum": [
              "da_DK",
              "en_US"
            ],
            "description": "The language used in the invitation email"
          }
        },
        "required": [
          "systemFields"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WriteResponse_Employee_": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "item": {
            "$ref": "#/components/schemas/Employee",
            "description": "The item that was created or updated"
          }
        },
        "required": [
          "success",
          "item"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DirectManagerUpdateInput": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "ID of the leader"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SystemFieldsUpdateInput": {
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "emailSecondary": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "mobilePrivate": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "nullable": true
          },
          "employmentStart": {
            "type": "string",
            "nullable": true
          },
          "employmentEnd": {
            "type": "string",
            "nullable": true
          },
          "emailWork": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "nullable": true
          },
          "cpr": {
            "type": "string",
            "nullable": true
          },
          "jobPositionTitle": {
            "type": "string",
            "nullable": true
          },
          "jobPositionDescription": {
            "type": "string",
            "nullable": true
          },
          "jobPositionType": {
            "type": "string",
            "nullable": true
          },
          "jobPositionWorkingHours": {
            "type": "string",
            "nullable": true
          },
          "bankRegistrationNumber": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "seniority": {
            "type": "string",
            "nullable": true
          },
          "directManager": {
            "$ref": "#/components/schemas/DirectManagerUpdateInput"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "CustomFieldTableInput": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the custom field table"
          },
          "updateType": {
            "type": "string",
            "enum": [
              "add",
              "replace"
            ],
            "description": "The type of update that should happen to the table.\nUse add for adding rows.\nUse replace for replacing the entire table."
          },
          "rows": {
            "items": {
              "properties": {},
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "type": "object"
            },
            "type": "array",
            "description": "The rows to add or replace.\nAn array of key-value objects where value is the name of the column."
          }
        },
        "required": [
          "id",
          "updateType",
          "rows"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UpdateEmployeeInput": {
        "properties": {
          "customId": {
            "type": "string",
            "nullable": true,
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "systemFields": {
            "$ref": "#/components/schemas/SystemFieldsUpdateInput",
            "description": "The system fields of the employee, such as email, phone and address"
          },
          "companyAdmin": {
            "type": "boolean",
            "description": "Whether or not the employee is an administrator"
          },
          "leader": {
            "type": "boolean",
            "description": "Whether or not the employee is a leader"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether or not the employee is archived"
          },
          "systemUser": {
            "type": "boolean",
            "description": "Whether or not the employee is a system user"
          },
          "picture": {
            "$ref": "#/components/schemas/EmployeePictureInput",
            "description": "The name and content of the picture"
          },
          "departments": {
            "items": {
              "$ref": "#/components/schemas/EmployeeDepartmentInput"
            },
            "type": "array",
            "description": "The departments that the employee belongs to"
          },
          "customFields": {
            "items": {
              "$ref": "#/components/schemas/CustomFieldInput"
            },
            "type": "array",
            "description": "An array of objects containing the id and value of custom fields belonging to the employee"
          },
          "customFieldTable": {
            "$ref": "#/components/schemas/CustomFieldTableInput",
            "description": "An object containing an updateType and rows to update for a custom field table"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "WriteResponse_Document_": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "item": {
            "$ref": "#/components/schemas/Document",
            "description": "The item that was created or updated"
          }
        },
        "required": [
          "success",
          "item"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UploadDocumentInput": {
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The name of the file including its extension.\ne.g. some_file_name.pdf"
          },
          "content": {
            "type": "string",
            "description": "The content of the file in base64. Files uploaded in this manner may be no larger than 4 mb.\nIf not included, an AWS S3 upload URL will be returned that accepts\nstandard PUT upload requests. Files uploaded using S3 upload may be up to 50 mb in size.\n*** BASE 64 CONTENT IS DEPRECATED IN FUTURE VERSIONS PLEASE USE UPLOAD URL ***",
            "default": ""
          },
          "documentType": {
            "type": "string",
            "description": "The date that the document will expire"
          },
          "expiresAt": {
            "type": "string",
            "description": "The date that the document will expire"
          },
          "access": {
            "type": "string"
          },
          "fileType": {
            "type": "string",
            "description": "The type of the file. A file is either a document or a user's logo."
          }
        },
        "required": [
          "fileName",
          "fileType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Competence": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "The UUID of the competence"
          },
          "name": {
            "type": "string",
            "description": "The name of the competence"
          },
          "addedDate": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The added_date of the competence"
          },
          "approvedDate": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The added_date of the competence"
          },
          "expireDate": {
            "$ref": "#/components/schemas/ISODate",
            "description": "The expire_at of the competence"
          }
        },
        "required": [
          "id",
          "name",
          "addedDate",
          "approvedDate",
          "expireDate"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_Competence_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Competence"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TemplatePlaceholder": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "UUID of the placeholder"
          },
          "name": {
            "type": "string",
            "description": "The name of the placeholder"
          },
          "value": {
            "type": "string",
            "description": "The value of the placeholder"
          },
          "customField": {
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "id"
            ],
            "type": "object",
            "description": "The ID of the custom field that the placeholder belongs to"
          }
        },
        "required": [
          "id",
          "name",
          "value"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_TemplatePlaceholder_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/TemplatePlaceholder"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WriteResponse_TemplatePlaceholder_": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "item": {
            "$ref": "#/components/schemas/TemplatePlaceholder",
            "description": "The item that was created or updated"
          }
        },
        "required": [
          "success",
          "item"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CreateTemplatePlaceholderInput": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the placeholder"
          },
          "value": {
            "type": "string",
            "description": "The value of the placeholder"
          },
          "customId": {
            "type": "string",
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "customFieldId": {
            "type": "string",
            "description": "The custom field that the placeholder is related to"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UpdateTemplatePlaceholderInput": {
        "properties": {
          "customId": {
            "type": "string",
            "nullable": true,
            "description": "A custom id that can be used instead of the auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "The name of the placeholder"
          },
          "value": {
            "type": "string",
            "description": "The value of the placeholder"
          },
          "customFieldId": {
            "type": "string",
            "description": "The custom field that the placeholder is related to"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Content": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "The id of the content"
          },
          "locale": {
            "type": "string",
            "description": "The language / locale of the widget"
          },
          "title": {
            "type": "string",
            "description": "The title of the widget"
          },
          "description": {
            "type": "string",
            "description": "The text of the widget"
          },
          "useButton": {
            "type": "boolean",
            "description": "If the widget should have a button"
          },
          "buttonText": {
            "type": "string",
            "description": "The text of the button"
          },
          "buttonUrl": {
            "type": "string",
            "description": "The url of the button"
          }
        },
        "required": [
          "locale",
          "title",
          "description"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Widget": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "UUID of the widget"
          },
          "content": {
            "items": {
              "$ref": "#/components/schemas/Content"
            },
            "type": "array",
            "description": "The content of the widget"
          },
          "size": {
            "type": "number",
            "enum": [
              1,
              2
            ],
            "description": "The size of the widget"
          },
          "backgroundColor": {
            "type": "string",
            "description": "The background color of the widget"
          },
          "widgetTextColor": {
            "type": "string",
            "description": "The text color of the widget"
          },
          "buttonTextColor": {
            "type": "string",
            "description": "The text color of the button"
          },
          "buttonBackgroundColor": {
            "type": "string",
            "description": "The background color of the button"
          },
          "buttonBorder": {
            "type": "boolean",
            "description": "If the button should have a border"
          },
          "useImage": {
            "type": "boolean",
            "description": "If the widget should use an image"
          },
          "imageLayout": {
            "type": "string",
            "enum": [
              "left",
              "right",
              "full"
            ],
            "description": "The layout of the image"
          },
          "imageName": {
            "type": "string",
            "description": "The name of the image file"
          },
          "imageExtension": {
            "type": "string",
            "description": "The extension of the image file"
          },
          "imageMimetype": {
            "type": "string",
            "description": "The mimetype of the image file"
          }
        },
        "required": [
          "id",
          "content",
          "size",
          "backgroundColor",
          "widgetTextColor",
          "useImage"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PaginatedResponse_Widget_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Widget"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "required": [
          "items",
          "pageInfo"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ContentCreateInput": {
        "properties": {
          "locale": {
            "type": "string",
            "description": "The language / locale of the widget"
          },
          "title": {
            "type": "string",
            "description": "The title of the widget"
          },
          "description": {
            "type": "string",
            "description": "The text of the widget"
          },
          "useButton": {
            "type": "boolean",
            "description": "If the widget should have a button"
          },
          "buttonText": {
            "type": "string",
            "description": "The text of the button"
          },
          "buttonUrl": {
            "type": "string",
            "description": "The url of the button"
          }
        },
        "required": [
          "locale",
          "title",
          "description"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CreateWidgetInput": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/ContentCreateInput"
            },
            "type": "array",
            "description": "The content of the widget"
          },
          "size": {
            "type": "number",
            "enum": [
              1,
              2
            ],
            "description": "The size of the widget"
          },
          "backgroundColor": {
            "type": "string",
            "description": "The background color of the widget"
          },
          "widgetTextColor": {
            "type": "string",
            "description": "The text color of the widget"
          },
          "buttonTextColor": {
            "type": "string",
            "description": "The text color of the button"
          },
          "buttonBackgroundColor": {
            "type": "string",
            "description": "The background color of the button"
          },
          "buttonBorder": {
            "type": "boolean",
            "description": "If the button should have a border"
          },
          "useImage": {
            "type": "boolean",
            "description": "If the widget should use an image"
          },
          "imageLayout": {
            "type": "string",
            "enum": [
              "left",
              "right",
              "full"
            ],
            "description": "The layout of the image"
          },
          "imageName": {
            "type": "string",
            "description": "The image name"
          },
          "imageExtension": {
            "type": "string",
            "description": "The image type"
          },
          "imageMimeType": {
            "type": "string",
            "description": "The image mimetype"
          },
          "imageData": {
            "$ref": "#/components/schemas/Base64",
            "description": "The image in base64"
          },
          "insertIntoAllDashboards": {
            "type": "boolean",
            "description": "Whether the widget should be inserted into all dashboards.\nNote that this is a VERY disruptive operation for the end user, as it messes with their widget setup, and should only be used sparingly."
          }
        },
        "required": [
          "backgroundColor",
          "widgetTextColor",
          "buttonTextColor",
          "buttonBackgroundColor"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WriteResponse_Widget_": {
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether or not the request was successful"
          },
          "item": {
            "$ref": "#/components/schemas/Widget",
            "description": "The item that was created or updated"
          }
        },
        "required": [
          "success",
          "item"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ContentUpdateInput": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "type": "string"
              }
            ],
            "description": "The id of the content"
          },
          "locale": {
            "type": "string",
            "description": "The language / locale of the widget"
          },
          "title": {
            "type": "string",
            "description": "The title of the widget"
          },
          "description": {
            "type": "string",
            "description": "The text of the widget"
          },
          "useButton": {
            "type": "boolean",
            "description": "If the widget should have a button"
          },
          "buttonText": {
            "type": "string",
            "description": "The text of the button"
          },
          "buttonUrl": {
            "type": "string",
            "description": "The url of the button"
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UpdateWidgetInput": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/ContentUpdateInput"
            },
            "type": "array",
            "description": "The content of the widget"
          },
          "size": {
            "type": "number",
            "enum": [
              1,
              2
            ],
            "description": "The size of the widget"
          },
          "backgroundColor": {
            "type": "string",
            "description": "The background color of the widget"
          },
          "widgetTextColor": {
            "type": "string",
            "description": "The text color of the widget"
          },
          "buttonTextColor": {
            "type": "string",
            "description": "The text color of the button"
          },
          "buttonBackgroundColor": {
            "type": "string",
            "description": "The background color of the button"
          },
          "buttonBorder": {
            "type": "boolean",
            "description": "If the button should have a border"
          },
          "useImage": {
            "type": "boolean",
            "description": "If the widget should use an image"
          },
          "imageLayout": {
            "type": "string",
            "enum": [
              "left",
              "right",
              "full"
            ],
            "description": "The layout of the image"
          },
          "imageName": {
            "type": "string",
            "description": "The image name"
          },
          "imageExtension": {
            "type": "string",
            "description": "The image type"
          },
          "imageMimeType": {
            "type": "string",
            "description": "The image mimetype"
          },
          "imageData": {
            "$ref": "#/components/schemas/Base64",
            "description": "The image in base64"
          }
        },
        "type": "object",
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "oauth2",
        "description": "HR-ON's API is secured with [OAuth 2.0](https://oauth.net/2/).\nAny applications that wish to retrieve or update data using the API must first be authenticated and authorized to do so. \nWe follow the [Authorization Framework](https://tools.ietf.org/html/rfc6749) protocol.\nFor documentation about the OAuth2 flows and refreshing tokens, see our [Auth Docs](https://auth.hr-on.com).\n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.hr-on.com/oauth2/authorize",
            "tokenUrl": "https://auth.hr-on.com/oauth2/token",
            "scopes": {
              "read:employee": "Retrieve employee data",
              "write:employee": "Modify employee data",
              "read:customField": "Retrieve custom field data",
              "write:customField": "Modify custom field data",
              "read:department": "Retrieve department data",
              "write:department": "modify department data",
              "read:document": "Retrieve document data",
              "write:document": "modify document data",
              "read:unsignedDocument": "Retrieve unsignedDocument data",
              "write:unsignedDocument": "modify unsignedDocument data",
              "read:documentTemplate": "Retrieve document template data",
              "write:documentTemplate": "modify document template data",
              "read:templatePlaceholder": "Retrieve template placeholder data",
              "write:templatePlaceholder": "modify template placeholder data"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "HR-ON API",
    "version": "1.0.0",
    "description": "If you choose to use our API we provide a Postman collection link along with an API key, client id, and client secret to get you started immediately.\nAll you need to do is import the collection through File->Import->Link in Postman and enter the variables in the root of the collection.\nThe collection contains all endpoints found here, examples of retrieving and refreshing tokens, along with all endpoints found in https://auth.hr-on.com.\nAdditionally, the collection uses a pre-request script to automatically retrieve and refresh tokens for all calls when testing through Postman - \nallowing you to start testing without having to setup Authorization manually.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "license": {
      "name": "ISC"
    },
    "contact": {
      "name": "Dan Hjartvar Eilskov Olsen"
    }
  },
  "openapi": "3.0.0",
  "paths": {
    "/v1/staff/absences": {
      "get": {
        "operationId": "GetAbsences",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Absence_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                          "absenceType": "Holiday",
                          "code": "1",
                          "startDate": "2020-01-01 14:00:00",
                          "endDate": "2020-01-02 14:00:00",
                          "fullDay": true,
                          "note": "I am on holiday",
                          "employeeId": "52907745-7672-470e-a803-a2f8feb52944",
                          "departmentIds": [
                            "52907745-7672-470e-a803-a2f8feb52944"
                          ],
                          "createdBy": "52907745-7672-470e-a803-a2f8feb52944",
                          "approvedAt": "2020-01-01 15:00:00",
                          "deniedAt": "2020-01-01 15:00:00",
                          "approvedOrDeniedBy": "52907745-7672-470e-a803-a2f8feb52944"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches absences in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:absence"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the ordering of items. Defaults to ASC (ascending).",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "description": "Specifies which attribute to order items by. Defaults to name.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "absenceType",
                "startDate",
                "endDate",
                "fullDay",
                "employeeId",
                "createdBy",
                "approvedAt",
                "deniedAt",
                "approvedOrDeniedBy"
              ]
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/absences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/absences',\n  qs: {\n    size: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    order: 'SOME_STRING_VALUE',\n    orderBy: 'SOME_STRING_VALUE'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/absences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/absences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/absences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/absences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/absences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/absences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/absences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/absences/employee/{id}": {
      "get": {
        "operationId": "GetEmployeeAbsences",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Absence_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                          "absenceType": "Holiday",
                          "code": "1",
                          "startDate": "2020-01-01 14:00:00",
                          "endDate": "2020-01-02 14:00:00",
                          "fullDay": true,
                          "note": "I am on holiday",
                          "employeeId": "52907745-7672-470e-a803-a2f8feb52944",
                          "departmentIds": [
                            "52907745-7672-470e-a803-a2f8feb52944"
                          ],
                          "createdBy": "52907745-7672-470e-a803-a2f8feb52944",
                          "approvedAt": "2020-01-01 15:00:00",
                          "deniedAt": "2020-01-01 15:00:00",
                          "approvedOrDeniedBy": "52907745-7672-470e-a803-a2f8feb52944"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches absences in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:absence"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the ordering of items. Defaults to ASC (ascending).",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "description": "Specifies which attribute to order items by. Defaults to name.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/absences/employee/%7Bid%7D?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/absences/employee/%7Bid%7D',\n  qs: {\n    size: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    order: 'SOME_STRING_VALUE',\n    orderBy: 'SOME_STRING_VALUE'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/absences/employee/%7Bid%7D?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/absences/employee/%7Bid%7D?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/absences/employee/%7Bid%7D?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/absences/employee/%7Bid%7D?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/absences/employee/%7Bid%7D?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/absences/employee/%7Bid%7D?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/absences/employee/%7Bid%7D?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/company": {
      "get": {
        "operationId": "GetCompany",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "63a97c0a-5bd2-42a4-a60d-ed4610a9312b",
                      "name": "Linkedin",
                      "description": "The world's largest professional network",
                      "url": "https://www.linkedin.com",
                      "createdAt": "2020-01-01T00:00:00.000Z",
                      "updatedAt": "2020-01-01T00:00:00.000Z",
                      "cvr": "12345678",
                      "locale": "da_DK",
                      "availableLocales": [
                        "en_US",
                        "da_DK"
                      ],
                      "address": "Sankt Peders Stræde 28C",
                      "city": "København",
                      "country": "Denmark",
                      "postalCode": "1453"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches basic information about a company.",
        "security": [
          {
            "JWT": [
              "read:company"
            ]
          }
        ],
        "parameters": [],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/company \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/company',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/company\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/company\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/company\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/company\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/company\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/company\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/company\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/company/employeeCount": {
      "get": {
        "operationId": "GetCompanyEmployeeCount",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                },
                "examples": {
                  "Example 1": {
                    "value": 123
                  }
                }
              }
            }
          }
        },
        "description": "Fetches employee count from a company.",
        "security": [
          {
            "JWT": [
              "read:company"
            ]
          }
        ],
        "parameters": [],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/company/employeeCount \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/company/employeeCount',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/company/employeeCount\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/company/employeeCount\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/company/employeeCount\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/company/employeeCount\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/company/employeeCount\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/company/employeeCount\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/company/employeeCount\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/customFields": {
      "get": {
        "operationId": "GetCustomFields",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_CustomField_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "63a97c0a-5bd2-42a4-a60d-ed4610a9312b",
                          "name": "Linkedin",
                          "defaultValue": null,
                          "fieldType": "text",
                          "description": null,
                          "fieldGroup": "Stamdata",
                          "order": 4,
                          "required": false,
                          "sensitive": false
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches custom fields in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:customField"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/customFields?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/customFields',\n  qs: {size: 'SOME_INTEGER_VALUE', offset: 'SOME_INTEGER_VALUE'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/customFields?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/customFields?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/customFields?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/customFields?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/customFields?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/customFields?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/customFields?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "operationId": "CreateCustomField",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_CustomField_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "63a97c0a-5bd2-42a4-a60d-ed4610a9312b",
                        "name": "Linkedin",
                        "defaultValue": null,
                        "fieldType": "text",
                        "description": null,
                        "fieldGroup": "Stamdata",
                        "order": 4,
                        "required": false,
                        "sensitive": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new custom field from the given input.",
        "security": [
          {
            "JWT": [
              "write:customField"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomFieldInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.hr-on.com//v1/staff/customFields \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"customId\":\"string\",\"name\":\"string\",\"fieldType\":\"text\",\"description\":\"string\",\"defaultValue\":\"string\",\"required\":true,\"sensitive\":true,\"options\":[{\"customId\":\"string\",\"value\":\"string\",\"order\":0}],\"fieldGroup\":\"string\",\"order\":0}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.hr-on.com//v1/staff/customFields',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    customId: 'string',\n    name: 'string',\n    fieldType: 'text',\n    description: 'string',\n    defaultValue: 'string',\n    required: true,\n    sensitive: true,\n    options: [{customId: 'string', value: 'string', order: 0}],\n    fieldGroup: 'string',\n    order: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"customId\": \"string\",\n  \"name\": \"string\",\n  \"fieldType\": \"text\",\n  \"description\": \"string\",\n  \"defaultValue\": \"string\",\n  \"required\": true,\n  \"sensitive\": true,\n  \"options\": [\n    {\n      \"customId\": \"string\",\n      \"value\": \"string\",\n      \"order\": 0\n    }\n  ],\n  \"fieldGroup\": \"string\",\n  \"order\": 0\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.hr-on.com//v1/staff/customFields\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/customFields\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.hr-on.com//v1/staff/customFields\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/customFields\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"//v1/staff/customFields\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/customFields\"\n\n\tpayload := strings.NewReader(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/customFields\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/customFields/{id}": {
      "get": {
        "operationId": "GetCustomField",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "63a97c0a-5bd2-42a4-a60d-ed4610a9312b",
                      "name": "Linkedin",
                      "defaultValue": null,
                      "fieldType": "text",
                      "description": null,
                      "fieldGroup": "Stamdata",
                      "order": 4,
                      "required": false,
                      "sensitive": false
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific custom field given an ID.",
        "security": [
          {
            "JWT": [
              "read:customField"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the custom field",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/customFields/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/customFields/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/customFields/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "operationId": "UpdateCustomField",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_CustomField_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "63a97c0a-5bd2-42a4-a60d-ed4610a9312b",
                        "name": "Linkedin",
                        "defaultValue": null,
                        "fieldType": "text",
                        "description": null,
                        "fieldGroup": "Stamdata",
                        "order": 4,
                        "required": false,
                        "sensitive": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates an existing custom field.\nNote that this is a patch method - only the fields given in the input are updated.",
        "security": [
          {
            "JWT": [
              "write:customField"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the custom field that is going to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.hr-on.com//v1/staff/customFields/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"customId\":\"string\",\"name\":\"string\",\"fieldType\":\"text\",\"description\":\"string\",\"defaultValue\":\"string\",\"required\":true,\"sensitive\":true,\"options\":[{\"updateType\":\"add\",\"id\":\"string\",\"customId\":\"string\",\"value\":\"string\",\"order\":0}],\"fieldGroup\":\"string\",\"order\":0}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.hr-on.com//v1/staff/customFields/%7Bid%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    customId: 'string',\n    name: 'string',\n    fieldType: 'text',\n    description: 'string',\n    defaultValue: 'string',\n    required: true,\n    sensitive: true,\n    options: [\n      {updateType: 'add', id: 'string', customId: 'string', value: 'string', order: 0}\n    ],\n    fieldGroup: 'string',\n    order: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"customId\": \"string\",\n  \"name\": \"string\",\n  \"fieldType\": \"text\",\n  \"description\": \"string\",\n  \"defaultValue\": \"string\",\n  \"required\": true,\n  \"sensitive\": true,\n  \"options\": [\n    {\n      \"updateType\": \"add\",\n      \"id\": \"string\",\n      \"customId\": \"string\",\n      \"value\": \"string\",\n      \"order\": 0\n    }\n  ],\n  \"fieldGroup\": \"string\",\n  \"order\": 0\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"updateType\\\":\\\"add\\\",\\\"id\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"updateType\\\":\\\"add\\\",\\\"id\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"updateType\\\":\\\"add\\\",\\\"id\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"updateType\\\":\\\"add\\\",\\\"id\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"//v1/staff/customFields/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"updateType\\\":\\\"add\\\",\\\"id\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"fieldType\\\":\\\"text\\\",\\\"description\\\":\\\"string\\\",\\\"defaultValue\\\":\\\"string\\\",\\\"required\\\":true,\\\"sensitive\\\":true,\\\"options\\\":[{\\\"updateType\\\":\\\"add\\\",\\\"id\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"order\\\":0}],\\\"fieldGroup\\\":\\\"string\\\",\\\"order\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "operationId": "DeleteCustomField",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes an existing custom field.",
        "security": [
          {
            "JWT": [
              "write:customField"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the custom field to be deleted",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.hr-on.com//v1/staff/customFields/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.hr-on.com//v1/staff/customFields/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"//v1/staff/customFields/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/customFields/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/departments": {
      "get": {
        "operationId": "GetDepartments",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Department_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                          "address": "Testvej 43",
                          "city": "Odense",
                          "country": "Danmark",
                          "createdAt": "2020-01-01",
                          "cvr": "123123123",
                          "departmentType": "Support",
                          "description": "An appropriate description",
                          "ean": "EAN_NUMBER",
                          "email": "support@hr-on.com",
                          "mainDepartment": true,
                          "name": "Marketing",
                          "parentDepartment": {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "name": "IT"
                          },
                          "phone": "12345678",
                          "postalCode": "5000",
                          "pNumber": "12345",
                          "updatedAt": "2020-01-01 14:00:00"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches departments in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:department"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the ordering of items. Defaults to ASC (ascending).",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "description": "Specifies which attribute to order items by. Defaults to name.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "departmentType",
                "postalCode",
                "createdAt",
                "updatedAt"
              ]
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/departments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/departments',\n  qs: {\n    size: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    order: 'SOME_STRING_VALUE',\n    orderBy: 'SOME_STRING_VALUE'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/departments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/departments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/departments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/departments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/departments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/departments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/departments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "operationId": "CreateDepartment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_Department_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                        "address": "Testvej 43",
                        "city": "Odense",
                        "country": "Danmark",
                        "createdAt": "2020-01-01",
                        "cvr": "123123123",
                        "departmentType": "Support",
                        "description": "An appropriate description",
                        "ean": "EAN_NUMBER",
                        "email": "support@hr-on.com",
                        "mainDepartment": true,
                        "name": "Marketing",
                        "parentDepartment": {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "IT"
                        },
                        "phone": "12345678",
                        "postalCode": "5000",
                        "pNumber": "12345",
                        "updatedAt": "2020-01-01 14:00:00"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new department from the given input.",
        "security": [
          {
            "JWT": [
              "write:department"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepartmentInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.hr-on.com//v1/staff/departments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"customId\":\"string\",\"description\":\"string\",\"mainDepartment\":true,\"ean\":\"string\",\"phone\":\"string\",\"email\":\"string\",\"address\":\"string\",\"city\":\"string\",\"postalCode\":\"string\",\"country\":\"string\",\"cvr\":\"string\",\"parentDepartmentId\":\"string\",\"departmentType\":\"string\",\"pNumber\":\"string\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.hr-on.com//v1/staff/departments',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    name: 'string',\n    customId: 'string',\n    description: 'string',\n    mainDepartment: true,\n    ean: 'string',\n    phone: 'string',\n    email: 'string',\n    address: 'string',\n    city: 'string',\n    postalCode: 'string',\n    country: 'string',\n    cvr: 'string',\n    parentDepartmentId: 'string',\n    departmentType: 'string',\n    pNumber: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"name\": \"string\",\n  \"customId\": \"string\",\n  \"description\": \"string\",\n  \"mainDepartment\": true,\n  \"ean\": \"string\",\n  \"phone\": \"string\",\n  \"email\": \"string\",\n  \"address\": \"string\",\n  \"city\": \"string\",\n  \"postalCode\": \"string\",\n  \"country\": \"string\",\n  \"cvr\": \"string\",\n  \"parentDepartmentId\": \"string\",\n  \"departmentType\": \"string\",\n  \"pNumber\": \"string\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.hr-on.com//v1/staff/departments\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/departments\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.hr-on.com//v1/staff/departments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/departments\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"//v1/staff/departments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/departments\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/departments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/departments/{id}": {
      "get": {
        "operationId": "GetDepartment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                      "address": "Testvej 43",
                      "city": "Odense",
                      "country": "Danmark",
                      "createdAt": "2020-01-01",
                      "cvr": "123123123",
                      "departmentType": "Support",
                      "description": "An appropriate description",
                      "ean": "EAN_NUMBER",
                      "email": "support@hr-on.com",
                      "mainDepartment": true,
                      "name": "Marketing",
                      "parentDepartment": {
                        "id": "52907745-7672-470e-a803-a2f8feb52944",
                        "name": "IT"
                      },
                      "phone": "12345678",
                      "postalCode": "5000",
                      "pNumber": "12345",
                      "updatedAt": "2020-01-01 14:00:00"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific department given an ID.",
        "security": [
          {
            "JWT": [
              "read:department"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the department",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/departments/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/departments/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/departments/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "operationId": "UpdateDepartment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_Department_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                        "address": "Testvej 43",
                        "city": "Odense",
                        "country": "Danmark",
                        "createdAt": "2020-01-01",
                        "cvr": "123123123",
                        "departmentType": "Support",
                        "description": "An appropriate description",
                        "ean": "EAN_NUMBER",
                        "email": "support@hr-on.com",
                        "mainDepartment": true,
                        "name": "Marketing",
                        "parentDepartment": {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "IT"
                        },
                        "phone": "12345678",
                        "postalCode": "5000",
                        "pNumber": "12345",
                        "updatedAt": "2020-01-01 14:00:00"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates an existing department.\nNote that this is a patch method - only the fields given in the input are updated.",
        "security": [
          {
            "JWT": [
              "write:department"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the department that is going to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDepartmentInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.hr-on.com//v1/staff/departments/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"customId\":\"string\",\"name\":\"string\",\"description\":\"string\",\"mainDepartment\":true,\"ean\":\"string\",\"phone\":\"string\",\"email\":\"string\",\"address\":\"string\",\"city\":\"string\",\"postalCode\":\"string\",\"country\":\"string\",\"cvr\":\"string\",\"parentDepartmentId\":\"string\",\"departmentType\":\"string\",\"pNumber\":\"string\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.hr-on.com//v1/staff/departments/%7Bid%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    customId: 'string',\n    name: 'string',\n    description: 'string',\n    mainDepartment: true,\n    ean: 'string',\n    phone: 'string',\n    email: 'string',\n    address: 'string',\n    city: 'string',\n    postalCode: 'string',\n    country: 'string',\n    cvr: 'string',\n    parentDepartmentId: 'string',\n    departmentType: 'string',\n    pNumber: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"customId\": \"string\",\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"mainDepartment\": true,\n  \"ean\": \"string\",\n  \"phone\": \"string\",\n  \"email\": \"string\",\n  \"address\": \"string\",\n  \"city\": \"string\",\n  \"postalCode\": \"string\",\n  \"country\": \"string\",\n  \"cvr\": \"string\",\n  \"parentDepartmentId\": \"string\",\n  \"departmentType\": \"string\",\n  \"pNumber\": \"string\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"//v1/staff/departments/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"mainDepartment\\\":true,\\\"ean\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"cvr\\\":\\\"string\\\",\\\"parentDepartmentId\\\":\\\"string\\\",\\\"departmentType\\\":\\\"string\\\",\\\"pNumber\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "operationId": "DeleteDepartment",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes an existing department.",
        "security": [
          {
            "JWT": [
              "write:department"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the department to be deleted",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.hr-on.com//v1/staff/departments/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.hr-on.com//v1/staff/departments/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"//v1/staff/departments/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/departments/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/documents": {
      "get": {
        "operationId": "GetDocuments",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Document_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "documentType": "Ansøgning",
                          "owner": {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "name": "John Doe"
                          },
                          "signers": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "John Doe",
                              "signed": false,
                              "email": "john.doe@test.com",
                              "owner": true,
                              "signedAt": "2020-12-04T15:34:31.487Z"
                            }
                          ],
                          "fileName": "test.pdf",
                          "fileExtension": "pdf",
                          "createdAt": "2020-12-01T14:37:32.257Z",
                          "expiresAt": null
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches documents for the company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:document"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "createdAt",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "operator",
            "required": false,
            "schema": {
              "enum": [
                "equal",
                "notEqual",
                "like",
                "greater",
                "greaterEqual",
                "less",
                "lessEqual"
              ],
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/documents',\n  qs: {\n    size: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    createdAt: 'SOME_STRING_VALUE',\n    operator: 'SOME_STRING_VALUE'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/documents/{id}": {
      "get": {
        "operationId": "GetDocument",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "52907745-7672-470e-a803-a2f8feb52944",
                      "documentType": "Ansøgning",
                      "owner": {
                        "id": "52907745-7672-470e-a803-a2f8feb52944",
                        "name": "John Doe"
                      },
                      "signers": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "John Doe",
                          "signed": false,
                          "email": "john.doe@test.com",
                          "owner": true,
                          "signedAt": "2020-12-04T15:34:31.487Z"
                        }
                      ],
                      "fileName": "test.pdf",
                      "fileExtension": "pdf",
                      "createdAt": "2020-12-01T14:37:32.257Z",
                      "expiresAt": null
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific document.",
        "security": [
          {
            "JWT": [
              "read:document"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the document",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/documents/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/documents/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/documents/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/documents/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/documents/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/documents/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/documents/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/documents/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/documents/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/documentTemplates": {
      "get": {
        "operationId": "GetDocumentTemplates",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_DocumentTemplate_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                          "createdAt": "2020-03-20T00:00:00",
                          "dateFormat": "20-07-2021",
                          "language": "da_DK",
                          "name": "Contract Template",
                          "updatedAt": "2020-03-20T00:00:00",
                          "description": "A description of the template",
                          "documentType": "Contract"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches DocumentTemplates in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:documentTemplate"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/documentTemplates?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/documentTemplates',\n  qs: {size: 'SOME_INTEGER_VALUE', offset: 'SOME_INTEGER_VALUE'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/documentTemplates?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/documentTemplates?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/documentTemplates?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/documentTemplates?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/documentTemplates?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/documentTemplates?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/documentTemplates?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "operationId": "CreateDocumentTemplate",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_DocumentTemplate_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                        "createdAt": "2020-03-20T00:00:00",
                        "dateFormat": "20-07-2021",
                        "language": "da_DK",
                        "name": "Contract Template",
                        "updatedAt": "2020-03-20T00:00:00",
                        "description": "A description of the template",
                        "documentType": "Contract"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new DocumentTemplate from the given input.",
        "security": [
          {
            "JWT": [
              "write:documentTemplate"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocumentTemplateInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.hr-on.com//v1/staff/documentTemplates \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"customId\":\"string\",\"name\":\"string\",\"description\":\"string\",\"documentType\":\"string\",\"language\":\"da_DK\",\"dateFormat\":\"20-07-2021\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.hr-on.com//v1/staff/documentTemplates',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    customId: 'string',\n    name: 'string',\n    description: 'string',\n    documentType: 'string',\n    language: 'da_DK',\n    dateFormat: '20-07-2021'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"customId\": \"string\",\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"documentType\": \"string\",\n  \"language\": \"da_DK\",\n  \"dateFormat\": \"20-07-2021\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.hr-on.com//v1/staff/documentTemplates\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/documentTemplates\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.hr-on.com//v1/staff/documentTemplates\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/documentTemplates\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"//v1/staff/documentTemplates\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/documentTemplates\"\n\n\tpayload := strings.NewReader(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/documentTemplates\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/documentTemplates/{id}": {
      "get": {
        "operationId": "GetDocumentTemplate",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTemplate"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                      "createdAt": "2020-03-20T00:00:00",
                      "dateFormat": "20-07-2021",
                      "language": "da_DK",
                      "name": "Contract Template",
                      "updatedAt": "2020-03-20T00:00:00",
                      "description": "A description of the template",
                      "documentType": "Contract"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific DocumentTemplate given an ID.",
        "security": [
          {
            "JWT": [
              "read:documentTemplate"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the DocumentTemplate",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/documentTemplates/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "operationId": "UpdateDocumentTemplate",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_DocumentTemplate_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                        "createdAt": "2020-03-20T00:00:00",
                        "dateFormat": "20-07-2021",
                        "language": "da_DK",
                        "name": "Contract Template",
                        "updatedAt": "2020-03-20T00:00:00",
                        "description": "A description of the template",
                        "documentType": "Contract"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates an existing DocumentTemplate.\nNote that this is a patch method - only the fields given in the input are updated.",
        "security": [
          {
            "JWT": [
              "write:documentTemplate"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the DocumentTemplate that is going to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocumentTemplateInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"customId\":\"string\",\"name\":\"string\",\"description\":\"string\",\"documentType\":\"string\",\"language\":\"da_DK\",\"dateFormat\":\"20-07-2021\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    customId: 'string',\n    name: 'string',\n    description: 'string',\n    documentType: 'string',\n    language: 'da_DK',\n    dateFormat: '20-07-2021'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"customId\": \"string\",\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"documentType\": \"string\",\n  \"language\": \"da_DK\",\n  \"dateFormat\": \"20-07-2021\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"//v1/staff/documentTemplates/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"documentType\\\":\\\"string\\\",\\\"language\\\":\\\"da_DK\\\",\\\"dateFormat\\\":\\\"20-07-2021\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "operationId": "DeleteDocumentTemplate",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes an existing DocumentTemplate.",
        "security": [
          {
            "JWT": [
              "write:documentTemplate"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the DocumentTemplate to be deleted",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"//v1/staff/documentTemplates/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/documentTemplates/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/employees": {
      "get": {
        "operationId": "GetEmployees",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Employee_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "systemFields": {
                            "employeeNumber": 1,
                            "email": "support@hr-on.com",
                            "firstName": "John",
                            "lastName": "Doe",
                            "city": "Odense",
                            "address": "Østre Stationsvej 27",
                            "locale": "da_DK",
                            "employmentStart": "2020-03-20T00:00:00",
                            "jobPositionTitle": "Tester",
                            "jobPositionDescription": "Testing",
                            "postalCode": "5000",
                            "mobile": "71990727",
                            "directManager": {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "Mr. Manager"
                            }
                          },
                          "archived": false,
                          "companyAdmin": true,
                          "leader": true,
                          "systemUser": true,
                          "departments": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "departmentId": "52907745-7672-470e-a803-a2f8feb52944",
                              "departmentCustomId": "01-IT",
                              "name": "IT",
                              "leader": false
                            }
                          ],
                          "roles": {
                            "employee": [
                              {
                                "id": "52907745-7672-470e-a803-a2f8feb52944",
                                "name": "Fulltime"
                              }
                            ],
                            "department": [
                              {
                                "id": "52907745-7672-470e-a803-a2f8feb52944",
                                "name": "Senior IT",
                                "departmentId": "52907745-7672-470e-a803-a2f8feb52944",
                                "departmentName": "IT"
                              }
                            ],
                            "company": [
                              {
                                "id": "52907745-7672-470e-a803-a2f8feb52944",
                                "name": "Admin"
                              }
                            ]
                          },
                          "customFields": [
                            {
                              "id": "0c3e92f8-2238-47ba-9fd8-1527f87e9f2d",
                              "name": "Iban",
                              "type": "text",
                              "value": "DK50 0040 0440 1162 43"
                            },
                            {
                              "id": "85e324a8-52c9-4686-94a3-c857ffae2438",
                              "name": "Systems",
                              "type": "multiselect",
                              "value": [
                                {
                                  "optionId": "a485476b-fc92-4976-8e3a-beb6a5a3f5dd",
                                  "optionValue": "CRM"
                                }
                              ]
                            },
                            {
                              "id": "d4e6c228-66a4-449e-988c-6ccb0783edf2",
                              "name": "Table of access privileges",
                              "type": "table",
                              "value": [
                                {
                                  "Date": "2022-04-29T10:50:14.234Z",
                                  "System": {
                                    "type": "select",
                                    "optionId": "174bf7c1-f9f5-4902-a6cc-d555b1fdc15a",
                                    "optionValue": "Adobe Admin"
                                  }
                                },
                                {
                                  "Date": "2022-04-29T10:50:17.595Z",
                                  "System": {
                                    "type": "select",
                                    "optionId": "20c98b01-5876-4553-8c30-d4c2394a0c45",
                                    "optionValue": "CRM Admin"
                                  }
                                }
                              ]
                            }
                          ],
                          "createdAt": "2021-01-01T00:00:00",
                          "updatedAt": "2021-01-01T00:00:00"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches employees in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:employee"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the ordering of items. Defaults to ASC (ascending).",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "description": "Specifies which attribute to order items by. Defaults to firstName.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "firstName",
                "lastName",
                "birthDate",
                "employmentStart",
                "employmentEnd",
                "postalCode",
                "createdAt",
                "updatedAt"
              ]
            }
          },
          {
            "description": "Enables filtering on the createdAt column. Expected format is ISO 8601.",
            "in": "query",
            "name": "createdAt",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enables filtering on the updatedAt column. Expected format is ISO 8601. Note that count is incorrect when using this filter.",
            "in": "query",
            "name": "updatedAt",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enables filtering on a system field. Use in conjunction with value.",
            "in": "query",
            "name": "systemField",
            "required": false,
            "schema": {
              "enum": [
                "employeeNumber",
                "firstName",
                "email",
                "lastName",
                "phone",
                "mobile",
                "mobilePrivate",
                "address",
                "city",
                "postalCode",
                "country",
                "locale",
                "employmentStart",
                "employmentEnd",
                "emailSecondary",
                "birthDate",
                "cpr",
                "jobPositionTitle",
                "jobPositionDescription",
                "jobPositionType",
                "jobPositionWorkingHours",
                "bankRegistrationNumber",
                "bankAccountNumber",
                "seniority"
              ],
              "type": "string"
            }
          },
          {
            "description": "Enables filtering on a custom field. Use in conjunction with value.",
            "in": "query",
            "name": "customFieldId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enables filtering on a specific department.",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enables filtering on a specific role.",
            "in": "query",
            "name": "roleId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The value of the system field or custom field that should be filtered by.\nUse in conjunction with systemField or customFieldId.\nIf the custom field value is from an option then the optionId should be provided as the value.",
            "in": "query",
            "name": "value",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sets which operator should be used for filtering. Defaults to 'equal'.",
            "in": "query",
            "name": "operator",
            "required": false,
            "schema": {
              "enum": [
                "equal",
                "notEqual",
                "like",
                "greater",
                "greaterEqual",
                "less",
                "lessEqual"
              ],
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/employees?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE&createdAt=SOME_STRING_VALUE&updatedAt=SOME_STRING_VALUE&systemField=SOME_STRING_VALUE&customFieldId=SOME_STRING_VALUE&departmentId=SOME_STRING_VALUE&roleId=SOME_STRING_VALUE&value=SOME_STRING_VALUE&operator=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/employees',\n  qs: {\n    size: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    order: 'SOME_STRING_VALUE',\n    orderBy: 'SOME_STRING_VALUE',\n    createdAt: 'SOME_STRING_VALUE',\n    updatedAt: 'SOME_STRING_VALUE',\n    systemField: 'SOME_STRING_VALUE',\n    customFieldId: 'SOME_STRING_VALUE',\n    departmentId: 'SOME_STRING_VALUE',\n    roleId: 'SOME_STRING_VALUE',\n    value: 'SOME_STRING_VALUE',\n    operator: 'SOME_STRING_VALUE'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/employees?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE&createdAt=SOME_STRING_VALUE&updatedAt=SOME_STRING_VALUE&systemField=SOME_STRING_VALUE&customFieldId=SOME_STRING_VALUE&departmentId=SOME_STRING_VALUE&roleId=SOME_STRING_VALUE&value=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE&createdAt=SOME_STRING_VALUE&updatedAt=SOME_STRING_VALUE&systemField=SOME_STRING_VALUE&customFieldId=SOME_STRING_VALUE&departmentId=SOME_STRING_VALUE&roleId=SOME_STRING_VALUE&value=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/employees?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE&createdAt=SOME_STRING_VALUE&updatedAt=SOME_STRING_VALUE&systemField=SOME_STRING_VALUE&customFieldId=SOME_STRING_VALUE&departmentId=SOME_STRING_VALUE&roleId=SOME_STRING_VALUE&value=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE&createdAt=SOME_STRING_VALUE&updatedAt=SOME_STRING_VALUE&systemField=SOME_STRING_VALUE&customFieldId=SOME_STRING_VALUE&departmentId=SOME_STRING_VALUE&roleId=SOME_STRING_VALUE&value=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/employees?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE&createdAt=SOME_STRING_VALUE&updatedAt=SOME_STRING_VALUE&systemField=SOME_STRING_VALUE&customFieldId=SOME_STRING_VALUE&departmentId=SOME_STRING_VALUE&roleId=SOME_STRING_VALUE&value=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE&createdAt=SOME_STRING_VALUE&updatedAt=SOME_STRING_VALUE&systemField=SOME_STRING_VALUE&customFieldId=SOME_STRING_VALUE&departmentId=SOME_STRING_VALUE&roleId=SOME_STRING_VALUE&value=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderBy=SOME_STRING_VALUE&createdAt=SOME_STRING_VALUE&updatedAt=SOME_STRING_VALUE&systemField=SOME_STRING_VALUE&customFieldId=SOME_STRING_VALUE&departmentId=SOME_STRING_VALUE&roleId=SOME_STRING_VALUE&value=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "operationId": "CreateEmployee",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmployeeResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "password": "GENERATED_PASS",
                      "item": {
                        "id": "52907745-7672-470e-a803-a2f8feb52944",
                        "systemFields": {
                          "employeeNumber": 1,
                          "email": "support@hr-on.com",
                          "firstName": "John",
                          "lastName": "Doe",
                          "city": "Odense",
                          "address": "Østre Stationsvej 27",
                          "locale": "da_DK",
                          "employmentStart": "2020-03-20T00:00:00",
                          "jobPositionTitle": "Tester",
                          "jobPositionDescription": "Testing",
                          "postalCode": "5000",
                          "mobile": "71990727",
                          "directManager": {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "name": "Mr. Manager"
                          }
                        },
                        "archived": false,
                        "companyAdmin": true,
                        "leader": true,
                        "systemUser": true,
                        "departments": [
                          {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "departmentId": "52907745-7672-470e-a803-a2f8feb52944",
                            "departmentCustomId": "01-IT",
                            "name": "IT",
                            "leader": false
                          }
                        ],
                        "roles": {
                          "employee": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "Fulltime"
                            }
                          ],
                          "department": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "Senior IT",
                              "departmentId": "52907745-7672-470e-a803-a2f8feb52944",
                              "departmentName": "IT"
                            }
                          ],
                          "company": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "Admin"
                            }
                          ]
                        },
                        "customFields": [
                          {
                            "id": "0c3e92f8-2238-47ba-9fd8-1527f87e9f2d",
                            "name": "Iban",
                            "type": "text",
                            "value": "DK50 0040 0440 1162 43"
                          },
                          {
                            "id": "85e324a8-52c9-4686-94a3-c857ffae2438",
                            "name": "Systems",
                            "type": "multiselect",
                            "value": [
                              {
                                "optionId": "a485476b-fc92-4976-8e3a-beb6a5a3f5dd",
                                "optionValue": "CRM"
                              }
                            ]
                          },
                          {
                            "id": "d4e6c228-66a4-449e-988c-6ccb0783edf2",
                            "name": "Table of access privileges",
                            "type": "table",
                            "value": [
                              {
                                "Date": "2022-04-29T10:50:14.234Z",
                                "System": {
                                  "type": "select",
                                  "optionId": "174bf7c1-f9f5-4902-a6cc-d555b1fdc15a",
                                  "optionValue": "Adobe Admin"
                                }
                              },
                              {
                                "Date": "2022-04-29T10:50:17.595Z",
                                "System": {
                                  "type": "select",
                                  "optionId": "20c98b01-5876-4553-8c30-d4c2394a0c45",
                                  "optionValue": "CRM Admin"
                                }
                              }
                            ]
                          }
                        ],
                        "createdAt": "2021-01-01T00:00:00",
                        "updatedAt": "2021-01-01T00:00:00"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new employee from the given input.",
        "security": [
          {
            "JWT": [
              "write:employee"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.hr-on.com//v1/staff/employees \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"systemFields\":{\"firstName\":\"string\",\"email\":\"string\",\"lastName\":\"string\",\"phone\":\"string\",\"mobile\":\"string\",\"mobilePrivate\":\"string\",\"address\":\"string\",\"city\":\"string\",\"postalCode\":\"string\",\"country\":\"string\",\"locale\":\"string\",\"employmentStart\":\"string\",\"employmentEnd\":\"string\",\"emailSecondary\":\"string\",\"emailWork\":\"string\",\"birthDate\":\"string\",\"cpr\":\"string\",\"jobPositionTitle\":\"string\",\"jobPositionDescription\":\"string\",\"jobPositionType\":\"string\",\"jobPositionWorkingHours\":\"string\",\"bankRegistrationNumber\":\"string\",\"bankAccountNumber\":\"string\",\"seniority\":\"string\",\"directManager\":{\"id\":\"string\"}},\"customId\":\"string\",\"companyAdmin\":true,\"leader\":true,\"systemUser\":true,\"picture\":{\"fileName\":\"string\",\"content\":\"string\"},\"departments\":[{\"id\":\"string\",\"leader\":true}],\"customFields\":[{\"id\":\"string\",\"value\":\"string\",\"optionId\":\"string\"}],\"password\":\"string\",\"sendInvitation\":true,\"invitationLanguage\":\"da_DK\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.hr-on.com//v1/staff/employees',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    systemFields: {\n      firstName: 'string',\n      email: 'string',\n      lastName: 'string',\n      phone: 'string',\n      mobile: 'string',\n      mobilePrivate: 'string',\n      address: 'string',\n      city: 'string',\n      postalCode: 'string',\n      country: 'string',\n      locale: 'string',\n      employmentStart: 'string',\n      employmentEnd: 'string',\n      emailSecondary: 'string',\n      emailWork: 'string',\n      birthDate: 'string',\n      cpr: 'string',\n      jobPositionTitle: 'string',\n      jobPositionDescription: 'string',\n      jobPositionType: 'string',\n      jobPositionWorkingHours: 'string',\n      bankRegistrationNumber: 'string',\n      bankAccountNumber: 'string',\n      seniority: 'string',\n      directManager: {id: 'string'}\n    },\n    customId: 'string',\n    companyAdmin: true,\n    leader: true,\n    systemUser: true,\n    picture: {fileName: 'string', content: 'string'},\n    departments: [{id: 'string', leader: true}],\n    customFields: [{id: 'string', value: 'string', optionId: 'string'}],\n    password: 'string',\n    sendInvitation: true,\n    invitationLanguage: 'da_DK'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"systemFields\": {\n    \"firstName\": \"string\",\n    \"email\": \"string\",\n    \"lastName\": \"string\",\n    \"phone\": \"string\",\n    \"mobile\": \"string\",\n    \"mobilePrivate\": \"string\",\n    \"address\": \"string\",\n    \"city\": \"string\",\n    \"postalCode\": \"string\",\n    \"country\": \"string\",\n    \"locale\": \"string\",\n    \"employmentStart\": \"string\",\n    \"employmentEnd\": \"string\",\n    \"emailSecondary\": \"string\",\n    \"emailWork\": \"string\",\n    \"birthDate\": \"string\",\n    \"cpr\": \"string\",\n    \"jobPositionTitle\": \"string\",\n    \"jobPositionDescription\": \"string\",\n    \"jobPositionType\": \"string\",\n    \"jobPositionWorkingHours\": \"string\",\n    \"bankRegistrationNumber\": \"string\",\n    \"bankAccountNumber\": \"string\",\n    \"seniority\": \"string\",\n    \"directManager\": {\n      \"id\": \"string\"\n    }\n  },\n  \"customId\": \"string\",\n  \"companyAdmin\": true,\n  \"leader\": true,\n  \"systemUser\": true,\n  \"picture\": {\n    \"fileName\": \"string\",\n    \"content\": \"string\"\n  },\n  \"departments\": [\n    {\n      \"id\": \"string\",\n      \"leader\": true\n    }\n  ],\n  \"customFields\": [\n    {\n      \"id\": \"string\",\n      \"value\": \"string\",\n      \"optionId\": \"string\"\n    }\n  ],\n  \"password\": \"string\",\n  \"sendInvitation\": true,\n  \"invitationLanguage\": \"da_DK\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.hr-on.com//v1/staff/employees\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"customId\\\":\\\"string\\\",\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"password\\\":\\\"string\\\",\\\"sendInvitation\\\":true,\\\"invitationLanguage\\\":\\\"da_DK\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.hr-on.com//v1/staff/employees\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"customId\\\":\\\"string\\\",\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"password\\\":\\\"string\\\",\\\"sendInvitation\\\":true,\\\"invitationLanguage\\\":\\\"da_DK\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"customId\\\":\\\"string\\\",\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"password\\\":\\\"string\\\",\\\"sendInvitation\\\":true,\\\"invitationLanguage\\\":\\\"da_DK\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"customId\\\":\\\"string\\\",\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"password\\\":\\\"string\\\",\\\"sendInvitation\\\":true,\\\"invitationLanguage\\\":\\\"da_DK\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"//v1/staff/employees\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees\"\n\n\tpayload := strings.NewReader(\"{\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"customId\\\":\\\"string\\\",\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"password\\\":\\\"string\\\",\\\"sendInvitation\\\":true,\\\"invitationLanguage\\\":\\\"da_DK\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"customId\\\":\\\"string\\\",\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"password\\\":\\\"string\\\",\\\"sendInvitation\\\":true,\\\"invitationLanguage\\\":\\\"da_DK\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/employees/{id}": {
      "get": {
        "operationId": "GetEmployee",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "52907745-7672-470e-a803-a2f8feb52944",
                      "systemFields": {
                        "employeeNumber": 1,
                        "email": "support@hr-on.com",
                        "firstName": "John",
                        "lastName": "Doe",
                        "city": "Odense",
                        "address": "Østre Stationsvej 27",
                        "locale": "da_DK",
                        "employmentStart": "2020-03-20T00:00:00",
                        "jobPositionTitle": "Tester",
                        "jobPositionDescription": "Testing",
                        "postalCode": "5000",
                        "mobile": "71990727",
                        "directManager": {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "Mr. Manager"
                        }
                      },
                      "archived": false,
                      "companyAdmin": true,
                      "leader": true,
                      "systemUser": true,
                      "departments": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "departmentId": "52907745-7672-470e-a803-a2f8feb52944",
                          "departmentCustomId": "01-IT",
                          "name": "IT",
                          "leader": false
                        }
                      ],
                      "roles": {
                        "employee": [
                          {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "name": "Fulltime"
                          }
                        ],
                        "department": [
                          {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "name": "Senior IT",
                            "departmentId": "52907745-7672-470e-a803-a2f8feb52944",
                            "departmentName": "IT"
                          }
                        ],
                        "company": [
                          {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "name": "Admin"
                          }
                        ]
                      },
                      "customFields": [
                        {
                          "id": "0c3e92f8-2238-47ba-9fd8-1527f87e9f2d",
                          "name": "Iban",
                          "type": "text",
                          "value": "DK50 0040 0440 1162 43"
                        },
                        {
                          "id": "85e324a8-52c9-4686-94a3-c857ffae2438",
                          "name": "Systems",
                          "type": "multiselect",
                          "value": [
                            {
                              "optionId": "a485476b-fc92-4976-8e3a-beb6a5a3f5dd",
                              "optionValue": "CRM"
                            }
                          ]
                        },
                        {
                          "id": "d4e6c228-66a4-449e-988c-6ccb0783edf2",
                          "name": "Table of access privileges",
                          "type": "table",
                          "value": [
                            {
                              "Date": "2022-04-29T10:50:14.234Z",
                              "System": {
                                "type": "select",
                                "optionId": "174bf7c1-f9f5-4902-a6cc-d555b1fdc15a",
                                "optionValue": "Adobe Admin"
                              }
                            },
                            {
                              "Date": "2022-04-29T10:50:17.595Z",
                              "System": {
                                "type": "select",
                                "optionId": "20c98b01-5876-4553-8c30-d4c2394a0c45",
                                "optionValue": "CRM Admin"
                              }
                            }
                          ]
                        }
                      ],
                      "createdAt": "2021-01-01T00:00:00",
                      "updatedAt": "2021-01-01T00:00:00"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific employee given an ID.",
        "security": [
          {
            "JWT": [
              "read:employee"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the employee",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/employees/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/employees/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "operationId": "UpdateEmployee",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_Employee_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "52907745-7672-470e-a803-a2f8feb52944",
                        "systemFields": {
                          "employeeNumber": 1,
                          "email": "support@hr-on.com",
                          "firstName": "John",
                          "lastName": "Doe",
                          "city": "Odense",
                          "address": "Østre Stationsvej 27",
                          "locale": "da_DK",
                          "employmentStart": "2020-03-20T00:00:00",
                          "jobPositionTitle": "Tester",
                          "jobPositionDescription": "Testing",
                          "postalCode": "5000",
                          "mobile": "71990727",
                          "directManager": {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "name": "Mr. Manager"
                          }
                        },
                        "archived": false,
                        "companyAdmin": true,
                        "leader": true,
                        "systemUser": true,
                        "departments": [
                          {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "departmentId": "52907745-7672-470e-a803-a2f8feb52944",
                            "departmentCustomId": "01-IT",
                            "name": "IT",
                            "leader": false
                          }
                        ],
                        "roles": {
                          "employee": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "Fulltime"
                            }
                          ],
                          "department": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "Senior IT",
                              "departmentId": "52907745-7672-470e-a803-a2f8feb52944",
                              "departmentName": "IT"
                            }
                          ],
                          "company": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "Admin"
                            }
                          ]
                        },
                        "customFields": [
                          {
                            "id": "0c3e92f8-2238-47ba-9fd8-1527f87e9f2d",
                            "name": "Iban",
                            "type": "text",
                            "value": "DK50 0040 0440 1162 43"
                          },
                          {
                            "id": "85e324a8-52c9-4686-94a3-c857ffae2438",
                            "name": "Systems",
                            "type": "multiselect",
                            "value": [
                              {
                                "optionId": "a485476b-fc92-4976-8e3a-beb6a5a3f5dd",
                                "optionValue": "CRM"
                              }
                            ]
                          },
                          {
                            "id": "d4e6c228-66a4-449e-988c-6ccb0783edf2",
                            "name": "Table of access privileges",
                            "type": "table",
                            "value": [
                              {
                                "Date": "2022-04-29T10:50:14.234Z",
                                "System": {
                                  "type": "select",
                                  "optionId": "174bf7c1-f9f5-4902-a6cc-d555b1fdc15a",
                                  "optionValue": "Adobe Admin"
                                }
                              },
                              {
                                "Date": "2022-04-29T10:50:17.595Z",
                                "System": {
                                  "type": "select",
                                  "optionId": "20c98b01-5876-4553-8c30-d4c2394a0c45",
                                  "optionValue": "CRM Admin"
                                }
                              }
                            ]
                          }
                        ],
                        "createdAt": "2021-01-01T00:00:00",
                        "updatedAt": "2021-01-01T00:00:00"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates an existing employee.\nNote that this is a patch method - only the fields given in the input are updated.",
        "security": [
          {
            "JWT": [
              "write:employee"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the employee that is going to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.hr-on.com//v1/staff/employees/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"customId\":\"string\",\"systemFields\":{\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"emailSecondary\":\"string\",\"phone\":\"string\",\"mobile\":\"string\",\"mobilePrivate\":\"string\",\"address\":\"string\",\"city\":\"string\",\"postalCode\":\"string\",\"country\":\"string\",\"locale\":\"string\",\"employmentStart\":\"string\",\"employmentEnd\":\"string\",\"emailWork\":\"string\",\"birthDate\":\"string\",\"cpr\":\"string\",\"jobPositionTitle\":\"string\",\"jobPositionDescription\":\"string\",\"jobPositionType\":\"string\",\"jobPositionWorkingHours\":\"string\",\"bankRegistrationNumber\":\"string\",\"bankAccountNumber\":\"string\",\"seniority\":\"string\",\"directManager\":{\"id\":\"string\"}},\"companyAdmin\":true,\"leader\":true,\"archived\":true,\"systemUser\":true,\"picture\":{\"fileName\":\"string\",\"content\":\"string\"},\"departments\":[{\"id\":\"string\",\"leader\":true}],\"customFields\":[{\"id\":\"string\",\"value\":\"string\",\"optionId\":\"string\"}],\"customFieldTable\":{\"id\":\"string\",\"updateType\":\"add\",\"rows\":[{\"property1\":\"string\",\"property2\":\"string\"}]}}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    customId: 'string',\n    systemFields: {\n      firstName: 'string',\n      lastName: 'string',\n      email: 'string',\n      emailSecondary: 'string',\n      phone: 'string',\n      mobile: 'string',\n      mobilePrivate: 'string',\n      address: 'string',\n      city: 'string',\n      postalCode: 'string',\n      country: 'string',\n      locale: 'string',\n      employmentStart: 'string',\n      employmentEnd: 'string',\n      emailWork: 'string',\n      birthDate: 'string',\n      cpr: 'string',\n      jobPositionTitle: 'string',\n      jobPositionDescription: 'string',\n      jobPositionType: 'string',\n      jobPositionWorkingHours: 'string',\n      bankRegistrationNumber: 'string',\n      bankAccountNumber: 'string',\n      seniority: 'string',\n      directManager: {id: 'string'}\n    },\n    companyAdmin: true,\n    leader: true,\n    archived: true,\n    systemUser: true,\n    picture: {fileName: 'string', content: 'string'},\n    departments: [{id: 'string', leader: true}],\n    customFields: [{id: 'string', value: 'string', optionId: 'string'}],\n    customFieldTable: {\n      id: 'string',\n      updateType: 'add',\n      rows: [{property1: 'string', property2: 'string'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"customId\": \"string\",\n  \"systemFields\": {\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"emailSecondary\": \"string\",\n    \"phone\": \"string\",\n    \"mobile\": \"string\",\n    \"mobilePrivate\": \"string\",\n    \"address\": \"string\",\n    \"city\": \"string\",\n    \"postalCode\": \"string\",\n    \"country\": \"string\",\n    \"locale\": \"string\",\n    \"employmentStart\": \"string\",\n    \"employmentEnd\": \"string\",\n    \"emailWork\": \"string\",\n    \"birthDate\": \"string\",\n    \"cpr\": \"string\",\n    \"jobPositionTitle\": \"string\",\n    \"jobPositionDescription\": \"string\",\n    \"jobPositionType\": \"string\",\n    \"jobPositionWorkingHours\": \"string\",\n    \"bankRegistrationNumber\": \"string\",\n    \"bankAccountNumber\": \"string\",\n    \"seniority\": \"string\",\n    \"directManager\": {\n      \"id\": \"string\"\n    }\n  },\n  \"companyAdmin\": true,\n  \"leader\": true,\n  \"archived\": true,\n  \"systemUser\": true,\n  \"picture\": {\n    \"fileName\": \"string\",\n    \"content\": \"string\"\n  },\n  \"departments\": [\n    {\n      \"id\": \"string\",\n      \"leader\": true\n    }\n  ],\n  \"customFields\": [\n    {\n      \"id\": \"string\",\n      \"value\": \"string\",\n      \"optionId\": \"string\"\n    }\n  ],\n  \"customFieldTable\": {\n    \"id\": \"string\",\n    \"updateType\": \"add\",\n    \"rows\": [\n      {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"customId\\\":\\\"string\\\",\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"archived\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"customFieldTable\\\":{\\\"id\\\":\\\"string\\\",\\\"updateType\\\":\\\"add\\\",\\\"rows\\\":[{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"customId\\\":\\\"string\\\",\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"archived\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"customFieldTable\\\":{\\\"id\\\":\\\"string\\\",\\\"updateType\\\":\\\"add\\\",\\\"rows\\\":[{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}]}}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"customId\\\":\\\"string\\\",\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"archived\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"customFieldTable\\\":{\\\"id\\\":\\\"string\\\",\\\"updateType\\\":\\\"add\\\",\\\"rows\\\":[{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"customId\\\":\\\"string\\\",\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"archived\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"customFieldTable\\\":{\\\"id\\\":\\\"string\\\",\\\"updateType\\\":\\\"add\\\",\\\"rows\\\":[{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"//v1/staff/employees/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"customId\\\":\\\"string\\\",\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"archived\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"customFieldTable\\\":{\\\"id\\\":\\\"string\\\",\\\"updateType\\\":\\\"add\\\",\\\"rows\\\":[{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"customId\\\":\\\"string\\\",\\\"systemFields\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"emailSecondary\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"mobile\\\":\\\"string\\\",\\\"mobilePrivate\\\":\\\"string\\\",\\\"address\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"postalCode\\\":\\\"string\\\",\\\"country\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"employmentStart\\\":\\\"string\\\",\\\"employmentEnd\\\":\\\"string\\\",\\\"emailWork\\\":\\\"string\\\",\\\"birthDate\\\":\\\"string\\\",\\\"cpr\\\":\\\"string\\\",\\\"jobPositionTitle\\\":\\\"string\\\",\\\"jobPositionDescription\\\":\\\"string\\\",\\\"jobPositionType\\\":\\\"string\\\",\\\"jobPositionWorkingHours\\\":\\\"string\\\",\\\"bankRegistrationNumber\\\":\\\"string\\\",\\\"bankAccountNumber\\\":\\\"string\\\",\\\"seniority\\\":\\\"string\\\",\\\"directManager\\\":{\\\"id\\\":\\\"string\\\"}},\\\"companyAdmin\\\":true,\\\"leader\\\":true,\\\"archived\\\":true,\\\"systemUser\\\":true,\\\"picture\\\":{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"string\\\"},\\\"departments\\\":[{\\\"id\\\":\\\"string\\\",\\\"leader\\\":true}],\\\"customFields\\\":[{\\\"id\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"optionId\\\":\\\"string\\\"}],\\\"customFieldTable\\\":{\\\"id\\\":\\\"string\\\",\\\"updateType\\\":\\\"add\\\",\\\"rows\\\":[{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "operationId": "DeleteEmployee",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes an existing employee.",
        "security": [
          {
            "JWT": [
              "write:employee"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the employee to be deleted",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.hr-on.com//v1/staff/employees/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"//v1/staff/employees/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/employees/{id}/documents": {
      "get": {
        "operationId": "GetEmployeeDocuments",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Document_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "documentType": "Ansøgning",
                          "owner": {
                            "id": "52907745-7672-470e-a803-a2f8feb52944",
                            "name": "John Doe"
                          },
                          "signers": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "John Doe",
                              "signed": false,
                              "email": "john.doe@test.com",
                              "owner": true,
                              "signedAt": "2020-12-04T15:34:31.487Z"
                            }
                          ],
                          "fileName": "test.pdf",
                          "fileExtension": "pdf",
                          "createdAt": "2020-12-01T14:37:32.257Z",
                          "expiresAt": null
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches documents for the employee given their ID. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:employee",
              "read:document"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents',\n  qs: {size: 'SOME_INTEGER_VALUE', offset: 'SOME_INTEGER_VALUE'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/employees/%7Bid%7D/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "operationId": "UploadEmployeeDocument",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_Document_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "52907745-7672-470e-a803-a2f8feb52944",
                        "documentType": "Ansøgning",
                        "owner": {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "John Doe"
                        },
                        "fileName": "test.pdf",
                        "fileExtension": "pdf",
                        "createdAt": "2020-10-10",
                        "expiresAt": "2021-10-10"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Uploads a document that belongs to the employee.",
        "security": [
          {
            "JWT": [
              "write:employee",
              "write:document"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadDocumentInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"fileName\":\"string\",\"content\":\"\",\"documentType\":\"string\",\"expiresAt\":\"string\",\"access\":\"string\",\"fileType\":\"string\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    fileName: 'string',\n    content: '',\n    documentType: 'string',\n    expiresAt: 'string',\n    access: 'string',\n    fileType: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"fileName\": \"string\",\n  \"content\": \"\",\n  \"documentType\": \"string\",\n  \"expiresAt\": \"string\",\n  \"access\": \"string\",\n  \"fileType\": \"string\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"\\\",\\\"documentType\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"access\\\":\\\"string\\\",\\\"fileType\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"\\\",\\\"documentType\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"access\\\":\\\"string\\\",\\\"fileType\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"\\\",\\\"documentType\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"access\\\":\\\"string\\\",\\\"fileType\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"\\\",\\\"documentType\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"access\\\":\\\"string\\\",\\\"fileType\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"//v1/staff/employees/%7Bid%7D/documents\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"\\\",\\\"documentType\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"access\\\":\\\"string\\\",\\\"fileType\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"fileName\\\":\\\"string\\\",\\\"content\\\":\\\"\\\",\\\"documentType\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"access\\\":\\\"string\\\",\\\"fileType\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/employees/{id}/documents/{documentId}": {
      "get": {
        "operationId": "GetEmployeeDocument",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "52907745-7672-470e-a803-a2f8feb52944",
                      "documentType": "Ansøgning",
                      "owner": {
                        "id": "52907745-7672-470e-a803-a2f8feb52944",
                        "name": "John Doe"
                      },
                      "signers": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "John Doe",
                          "signed": false,
                          "email": "john.doe@test.com",
                          "owner": true,
                          "signedAt": "2020-12-04T15:34:31.487Z"
                        }
                      ],
                      "content": "MTIz",
                      "fileName": "test.pdf",
                      "fileExtension": "pdf",
                      "createdAt": "2020-12-01T14:37:32.257Z",
                      "expiresAt": null
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific document for an employee given the ID of the employee and document.",
        "security": [
          {
            "JWT": [
              "read:employee",
              "read:document"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the employee",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The UUID of the document",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "operationId": "DeleteEmployeeDocument",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes an existing document.",
        "security": [
          {
            "JWT": [
              "write:employee",
              "write:document"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the employee",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The UUID of the document",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/documents/%7BdocumentId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/employees/{id}/unsignedDocuments": {
      "get": {
        "operationId": "GetEmployeeUnsignedDocuments",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Document_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "Important contract",
                          "placeholders": {
                            "key": "value"
                          },
                          "signers": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "John Doe",
                              "signed": false,
                              "email": "john.doe@test.com",
                              "owner": true,
                              "signedAt": "2020-12-04T15:34:31.487Z"
                            }
                          ],
                          "template": {
                            "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                            "name": "Test template",
                            "documentType": "Contract"
                          },
                          "createdAt": "2020-12-01T14:37:32.257Z"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches employees in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:employee",
              "read:unsignedDocument"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments',\n  qs: {size: 'SOME_INTEGER_VALUE', offset: 'SOME_INTEGER_VALUE'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/employees/%7Bid%7D/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/employees/{id}/unsignedDocuments/{documentId}": {
      "get": {
        "operationId": "GetEmployeeUnsignedDocument",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "52907745-7672-470e-a803-a2f8feb52944",
                      "name": "Important contract",
                      "placeholders": {
                        "key": "value"
                      },
                      "signers": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "John Doe",
                          "signed": false,
                          "email": "john.doe@test.com",
                          "owner": true,
                          "signedAt": "2020-12-04T15:34:31.487Z"
                        }
                      ],
                      "template": {
                        "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                        "name": "Test template",
                        "documentType": "Contract"
                      },
                      "createdAt": "2020-12-01T14:37:32.257Z"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific document for an employee given the ID of the employee and document.",
        "security": [
          {
            "JWT": [
              "read:employee",
              "read:unsignedDocument"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the employee",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The UUID of the document",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/unsignedDocuments/%7BdocumentId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/employees/{id}/competences": {
      "get": {
        "operationId": "GetEmployeeCompetences",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Competence_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "Project management",
                          "addedDate": "2020-12-01T14:37:32.257Z",
                          "approvedDate": "2020-12-01T14:37:32.257Z",
                          "expireDate": "2020-12-01T14:37:32.257Z"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches employee competences. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:employee",
              "read:competence"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences',\n  qs: {size: 'SOME_INTEGER_VALUE', offset: 'SOME_INTEGER_VALUE'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/employees/%7Bid%7D/competences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/employees/{id}/competences/{competenceId}": {
      "get": {
        "operationId": "GetEmployeeCompetence",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Competence"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "52907745-7672-470e-a803-a2f8feb52944",
                      "name": "Project management",
                      "addedDate": "2020-12-01T14:37:32.257Z",
                      "approvedDate": "2020-12-01T14:37:32.257Z",
                      "expireDate": "2020-12-01T14:37:32.257Z"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific competence for an employee given the ID of the employee and competence.",
        "security": [
          {
            "JWT": [
              "read:employee",
              "read:competence"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the employee",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The UUID of the competence",
            "in": "path",
            "name": "competenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/employees/%7Bid%7D/competences/%7BcompetenceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/templatePlaceholders": {
      "get": {
        "operationId": "GetTemplatePlaceholders",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_TemplatePlaceholder_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                          "name": "Arbejdstimer",
                          "value": "37"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches template placeholders in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:templatePlaceholder"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/templatePlaceholders?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/templatePlaceholders',\n  qs: {size: 'SOME_INTEGER_VALUE', offset: 'SOME_INTEGER_VALUE'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/templatePlaceholders?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/templatePlaceholders?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/templatePlaceholders?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/templatePlaceholders?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/templatePlaceholders?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/templatePlaceholders?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/templatePlaceholders?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "operationId": "CreateTemplatePlaceholder",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_TemplatePlaceholder_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                        "name": "Arbejdstimer",
                        "value": "37"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new TemplatePlaceholder from the given input.",
        "security": [
          {
            "JWT": [
              "write:templatePlaceholder"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplatePlaceholderInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.hr-on.com//v1/staff/templatePlaceholders \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"value\":\"string\",\"customId\":\"string\",\"customFieldId\":\"string\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.hr-on.com//v1/staff/templatePlaceholders',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {name: 'string', value: 'string', customId: 'string', customFieldId: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"name\": \"string\",\n  \"value\": \"string\",\n  \"customId\": \"string\",\n  \"customFieldId\": \"string\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.hr-on.com//v1/staff/templatePlaceholders\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/templatePlaceholders\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.hr-on.com//v1/staff/templatePlaceholders\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/templatePlaceholders\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"//v1/staff/templatePlaceholders\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/templatePlaceholders\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/templatePlaceholders\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customId\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/templatePlaceholders/{id}": {
      "get": {
        "operationId": "GetTemplatePlaceholder",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatePlaceholder"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                      "name": "Arbejdstimer",
                      "value": "37"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific TemplatePlaceholder given an ID.",
        "security": [
          {
            "JWT": [
              "read:templatePlaceholder"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The ID of the TemplatePlaceholder",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/templatePlaceholders/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "operationId": "UpdateTemplatePlaceholder",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_TemplatePlaceholder_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                        "name": "Arbejdstimer",
                        "value": "37"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates an existing template placeholder.\nNote that this is a patch method - only the fields given in the input are updated.",
        "security": [
          {
            "JWT": [
              "write:templatePlaceholder"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The ID of the template placeholder that is going to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplatePlaceholderInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"customId\":\"string\",\"name\":\"string\",\"value\":\"string\",\"customFieldId\":\"string\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {customId: 'string', name: 'string', value: 'string', customFieldId: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"customId\": \"string\",\n  \"name\": \"string\",\n  \"value\": \"string\",\n  \"customFieldId\": \"string\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"//v1/staff/templatePlaceholders/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"customId\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"customFieldId\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "operationId": "DeleteTemplatePlaceholder",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes an existing template placeholder.",
        "security": [
          {
            "JWT": [
              "write:templatePlaceholder"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The ID of the template placeholder to be deleted",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"//v1/staff/templatePlaceholders/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/templatePlaceholders/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/unsignedDocuments": {
      "get": {
        "operationId": "GetUnsignedDocuments",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Document_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "Important contract",
                          "placeholders": {
                            "key": "value"
                          },
                          "signers": [
                            {
                              "id": "52907745-7672-470e-a803-a2f8feb52944",
                              "name": "John Doe",
                              "signed": false,
                              "email": "john.doe@test.com",
                              "owner": true,
                              "signedAt": "2020-12-04T15:34:31.487Z"
                            }
                          ],
                          "template": {
                            "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                            "name": "Test template",
                            "documentType": "Contract"
                          },
                          "createdAt": "2020-12-01T14:37:32.257Z"
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches unsigned documents for the company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": [
              "read:unsignedDocument"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "createdAt",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "operator",
            "required": false,
            "schema": {
              "enum": [
                "equal",
                "notEqual",
                "like",
                "greater",
                "greaterEqual",
                "less",
                "lessEqual"
              ],
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/unsignedDocuments',\n  qs: {\n    size: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    createdAt: 'SOME_STRING_VALUE',\n    operator: 'SOME_STRING_VALUE'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/unsignedDocuments?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&createdAt=SOME_STRING_VALUE&operator=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/unsignedDocuments/{id}": {
      "get": {
        "operationId": "GetUnsignedDocument",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "52907745-7672-470e-a803-a2f8feb52944",
                      "name": "Important contract",
                      "placeholders": {
                        "key": "value"
                      },
                      "signers": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "John Doe",
                          "signed": false,
                          "email": "john.doe@test.com",
                          "owner": true,
                          "signedAt": "2020-12-04T15:34:31.487Z"
                        }
                      ],
                      "template": {
                        "id": "d705ebe9-e8d0-4c9e-8fbd-88b86439f943",
                        "name": "Test template",
                        "documentType": "Contract"
                      },
                      "createdAt": "2020-12-01T14:37:32.257Z"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches a specific unsigned document.",
        "security": [
          {
            "JWT": [
              "read:unsignedDocument"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the document",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/unsignedDocuments/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/unsignedDocuments/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/unsignedDocuments/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/unsignedDocuments/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/unsignedDocuments/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/unsignedDocuments/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/unsignedDocuments/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/unsignedDocuments/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/unsignedDocuments/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/widgets": {
      "get": {
        "operationId": "GetWidgets",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Widget_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "items": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "content": [
                            {
                              "id": "22907745-7672-470e-a803-a2f8feb52944",
                              "title": "Widget Title",
                              "locale": "en_US",
                              "description": "Widget Text",
                              "useButton": true,
                              "buttonText": "Button Text",
                              "buttonUrl": "https://www.google.com"
                            }
                          ],
                          "size": 1,
                          "useImage": true,
                          "imageLayout": "left",
                          "backgroundColor": "#ffffff",
                          "widgetTextColor": "#000000",
                          "buttonTextColor": "#000000",
                          "buttonBackgroundColor": "#ffffff",
                          "buttonBorder": true
                        }
                      ],
                      "pageInfo": {
                        "offset": 0,
                        "size": 1,
                        "total": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches widgets in your company. Use size and offset parameters to paginate through the results.",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "description": "Specifies the amount of items to be returned. Defaults to 20.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the amount of items to skip before selection.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.hr-on.com//v1/staff/widgets?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/widgets',\n  qs: {size: 'SOME_INTEGER_VALUE', offset: 'SOME_INTEGER_VALUE'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/widgets?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/widgets?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/widgets?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/widgets?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/widgets?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/widgets?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/widgets?size=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "operationId": "CreateWidget",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "52907745-7672-470e-a803-a2f8feb52944",
                        "content": [
                          {
                            "id": "22907745-7672-470e-a803-a2f8feb52944",
                            "title": "Widget Title",
                            "locale": "en_US",
                            "description": "Widget Text",
                            "useButton": true,
                            "buttonText": "Button Text",
                            "buttonUrl": "https://www.google.com"
                          }
                        ],
                        "size": 1,
                        "useImage": true,
                        "imageLayout": "left",
                        "imageName": "image.jpg",
                        "imageExtension": "jpg",
                        "imageMimetype": "image/jpeg",
                        "backgroundColor": "#ffffff",
                        "widgetTextColor": "#000000",
                        "buttonTextColor": "#000000",
                        "buttonBackgroundColor": "#ffffff",
                        "buttonBorder": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new widget.",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "The input for the widget",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWidgetInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.hr-on.com//v1/staff/widgets \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"content\":[{\"locale\":\"string\",\"title\":\"string\",\"description\":\"string\",\"useButton\":true,\"buttonText\":\"string\",\"buttonUrl\":\"string\"}],\"size\":1,\"backgroundColor\":\"string\",\"widgetTextColor\":\"string\",\"buttonTextColor\":\"string\",\"buttonBackgroundColor\":\"string\",\"buttonBorder\":true,\"useImage\":true,\"imageLayout\":\"left\",\"imageName\":\"string\",\"imageExtension\":\"string\",\"imageMimeType\":\"string\",\"imageData\":\"string\",\"insertIntoAllDashboards\":true}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.hr-on.com//v1/staff/widgets',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    content: [\n      {\n        locale: 'string',\n        title: 'string',\n        description: 'string',\n        useButton: true,\n        buttonText: 'string',\n        buttonUrl: 'string'\n      }\n    ],\n    size: 1,\n    backgroundColor: 'string',\n    widgetTextColor: 'string',\n    buttonTextColor: 'string',\n    buttonBackgroundColor: 'string',\n    buttonBorder: true,\n    useImage: true,\n    imageLayout: 'left',\n    imageName: 'string',\n    imageExtension: 'string',\n    imageMimeType: 'string',\n    imageData: 'string',\n    insertIntoAllDashboards: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"content\": [\n    {\n      \"locale\": \"string\",\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"useButton\": true,\n      \"buttonText\": \"string\",\n      \"buttonUrl\": \"string\"\n    }\n  ],\n  \"size\": 1,\n  \"backgroundColor\": \"string\",\n  \"widgetTextColor\": \"string\",\n  \"buttonTextColor\": \"string\",\n  \"buttonBackgroundColor\": \"string\",\n  \"buttonBorder\": true,\n  \"useImage\": true,\n  \"imageLayout\": \"left\",\n  \"imageName\": \"string\",\n  \"imageExtension\": \"string\",\n  \"imageMimeType\": \"string\",\n  \"imageData\": \"string\",\n  \"insertIntoAllDashboards\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.hr-on.com//v1/staff/widgets\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/widgets\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"content\\\":[{\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\",\\\"insertIntoAllDashboards\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.hr-on.com//v1/staff/widgets\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"content\\\":[{\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\",\\\"insertIntoAllDashboards\\\":true}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/widgets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"content\\\":[{\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\",\\\"insertIntoAllDashboards\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"content\\\":[{\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\",\\\"insertIntoAllDashboards\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"//v1/staff/widgets\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/widgets\"\n\n\tpayload := strings.NewReader(\"{\\\"content\\\":[{\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\",\\\"insertIntoAllDashboards\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/widgets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"content\\\":[{\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\",\\\"insertIntoAllDashboards\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/staff/widgets/{id}": {
      "get": {
        "operationId": "GetWidget",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "52907745-7672-470e-a803-a2f8feb52944",
                      "content": [
                        {
                          "id": "22907745-7672-470e-a803-a2f8feb52944",
                          "title": "Widget Title",
                          "locale": "en_US",
                          "description": "Widget Text",
                          "useButton": true,
                          "buttonText": "Button Text",
                          "buttonUrl": "https://www.google.com"
                        }
                      ],
                      "size": 1,
                      "useImage": true,
                      "imageLayout": "left",
                      "backgroundColor": "#ffffff",
                      "widgetTextColor": "#000000",
                      "buttonTextColor": "#000000",
                      "buttonBackgroundColor": "#ffffff",
                      "buttonBorder": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Fetches information about a widget.",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.hr-on.com//v1/staff/widgets/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.hr-on.com//v1/staff/widgets/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"//v1/staff/widgets/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "operationId": "UpdateWidget",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse_Widget_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true,
                      "item": {
                        "id": "52907745-7672-470e-a803-a2f8feb52944",
                        "content": [
                          {
                            "id": "22907745-7672-470e-a803-a2f8feb52944",
                            "title": "Widget Title",
                            "locale": "en_US",
                            "description": "Widget Text",
                            "useButton": true,
                            "buttonText": "Button Text",
                            "buttonUrl": "https://www.google.com"
                          }
                        ],
                        "size": 1,
                        "useImage": true,
                        "imageLayout": "left",
                        "imageName": "image.jpg",
                        "imageExtension": "jpg",
                        "imageMimetype": "image/jpeg",
                        "backgroundColor": "#ffffff",
                        "widgetTextColor": "#000000",
                        "buttonTextColor": "#000000",
                        "buttonBackgroundColor": "#ffffff",
                        "buttonBorder": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates an existing widget.\nNote that this is a patch method - only the fields given in the input are updated.",
        "security": [
          {
            "JWT": [
              "write:widget"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the widget that is going to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWidgetInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.hr-on.com//v1/staff/widgets/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"content\":[{\"id\":\"string\",\"locale\":\"string\",\"title\":\"string\",\"description\":\"string\",\"useButton\":true,\"buttonText\":\"string\",\"buttonUrl\":\"string\"}],\"size\":1,\"backgroundColor\":\"string\",\"widgetTextColor\":\"string\",\"buttonTextColor\":\"string\",\"buttonBackgroundColor\":\"string\",\"buttonBorder\":true,\"useImage\":true,\"imageLayout\":\"left\",\"imageName\":\"string\",\"imageExtension\":\"string\",\"imageMimeType\":\"string\",\"imageData\":\"string\"}'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.hr-on.com//v1/staff/widgets/%7Bid%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    content: [\n      {\n        id: 'string',\n        locale: 'string',\n        title: 'string',\n        description: 'string',\n        useButton: true,\n        buttonText: 'string',\n        buttonUrl: 'string'\n      }\n    ],\n    size: 1,\n    backgroundColor: 'string',\n    widgetTextColor: 'string',\n    buttonTextColor: 'string',\n    buttonBackgroundColor: 'string',\n    buttonBorder: true,\n    useImage: true,\n    imageLayout: 'left',\n    imageName: 'string',\n    imageExtension: 'string',\n    imageMimeType: 'string',\n    imageData: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"content\": [\n    {\n      \"id\": \"string\",\n      \"locale\": \"string\",\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"useButton\": true,\n      \"buttonText\": \"string\",\n      \"buttonUrl\": \"string\"\n    }\n  ],\n  \"size\": 1,\n  \"backgroundColor\": \"string\",\n  \"widgetTextColor\": \"string\",\n  \"buttonTextColor\": \"string\",\n  \"buttonBackgroundColor\": \"string\",\n  \"buttonBorder\": true,\n  \"useImage\": true,\n  \"imageLayout\": \"left\",\n  \"imageName\": \"string\",\n  \"imageExtension\": \"string\",\n  \"imageMimeType\": \"string\",\n  \"imageData\": \"string\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"content\\\":[{\\\"id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"content\\\":[{\\\"id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"content\\\":[{\\\"id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\npayload = \"{\\\"content\\\":[{\\\"id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"//v1/staff/widgets/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"content\\\":[{\\\"id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"content\\\":[{\\\"id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"useButton\\\":true,\\\"buttonText\\\":\\\"string\\\",\\\"buttonUrl\\\":\\\"string\\\"}],\\\"size\\\":1,\\\"backgroundColor\\\":\\\"string\\\",\\\"widgetTextColor\\\":\\\"string\\\",\\\"buttonTextColor\\\":\\\"string\\\",\\\"buttonBackgroundColor\\\":\\\"string\\\",\\\"buttonBorder\\\":true,\\\"useImage\\\":true,\\\"imageLayout\\\":\\\"left\\\",\\\"imageName\\\":\\\"string\\\",\\\"imageExtension\\\":\\\"string\\\",\\\"imageMimeType\\\":\\\"string\\\",\\\"imageData\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "operationId": "DeleteWidget",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes an existing widget.",
        "security": [
          {
            "JWT": [
              "write:widget"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The UUID of the widget to be deleted",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.hr-on.com//v1/staff/widgets/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.hr-on.com//v1/staff/widgets/%7Bid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.hr-on.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"//v1/staff/widgets/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.hr-on.com//v1/staff/widgets/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.hr-on.com/"
    }
  ]
}